<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[They Call Me Mister James]]></title>
  <subtitle><![CDATA[Building the Web and Other Musings]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jameschambers.com/"/>
  <updated>2016-01-20T03:26:03.800Z</updated>
  <id>http://jameschambers.com/</id>
  
  <author>
    <name><![CDATA[James Chambers]]></name>
    <email><![CDATA[james@jameschambers.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Everything You Need To Know About Microsoft Band 2 Battery Life]]></title>
    <link href="http://jameschambers.com/2016/01/2106-01-17-Everything-You-Need-To-Know-About-Band-2-Battery-Life/"/>
    <id>http://jameschambers.com/2016/01/2106-01-17-Everything-You-Need-To-Know-About-Band-2-Battery-Life/</id>
    <published>2016-01-18T02:44:01.000Z</published>
    <updated>2016-01-20T03:26:03.800Z</updated>
    <content type="html"><![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2.png" alt="Band 2"></p>
<p>The day the announcement was made for Band 2, I was watching the keynote and keeping my finger on F5, repeatedly refreshing my browser and eagerly waiting for the Band 2 “Coming Soon” page turn over to an “Order Now” page. The week before launch, I added my credit card as a saved card on the Microsoft store. As soon as the page flipped over, I pulled the trigger and reserved my new edition.</p>
<p>I’ve worn it every day since November 2, 2015 and here’s what I’ve learned about the Microsoft Band 2 battery life, including tips on how to keep yours running <strong>all week long</strong>.</p>
<a id="more"></a>
<h2 id="Charging_the_Microsoft_Band_2"><a href="#Charging_the_Microsoft_Band_2" class="headerlink" title="Charging the Microsoft Band 2"></a>Charging the Microsoft Band 2</h2><p>The Band is easily charged by unhinging the clasp and sliding the device off your wrist, then attaching the magnetized charger, which snaps automatically in place. A full charge for a fully depleted battery should run you less than two hours.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2-charger.png" alt="Band 2 Charging"></p>
<h2 id="Battery_Life"><a href="#Battery_Life" class="headerlink" title="Battery Life"></a>Battery Life</h2><p>Under normal usage, your Band will deplete about 30% per day. This includes getting notifications, syncing with your phone, controlling music, setting timers and alarms, using the daily heart rate tracking and buying coffee at Starbucks, should you be so inclined.</p>
<p>Adding workouts to your day will drive the battery down a little more quickly, and I seem to burn about 10% of my battery when I go for a 30 min run with GPS turned on. </p>
<h2 id="Watch_Mode"><a href="#Watch_Mode" class="headerlink" title="Watch Mode"></a>Watch Mode</h2><p>One feature that I really do enjoy about the Band 2 is the glance mode that allows you to turn your arm up as a cue for the Band to display the time. While this is super handy - the gesture replaces the need the press a button to see the time - it is also taxing on your battery life. With this feature one, I was losing more than 55% of my battery’s charge each day, meaning it was impossible to keep it running for the week. I, therefore, disabled the feature and have reverted to clicking the primary button to call up the time.</p>
<h2 id="Charge_Time"><a href="#Charge_Time" class="headerlink" title="Charge Time"></a>Charge Time</h2><p>The “bottom half” of the battery seems to charge a little quicker than the “top half”. What I mean is that going from 0%  to 50% seems to take about 40 minutes or so whereas from the 50% mark and higher, the Band 2 charges at a rate of about 1% per minute. </p>
<h2 id="My_Routine"><a href="#My_Routine" class="headerlink" title="My Routine"></a>My Routine</h2><p>The battery on my Band 2 lasts me through the week.  While it depletes every day about 30%, I also charge it every day during my daily routine and after workouts while I shower.  Here’s a log from my last week of use starting with a full charge on Saturday:</p>
<ul>
<li>Sunday AM: 72%, charged to 91%</li>
<li>Monday AM: 66%, charged to 83%</li>
<li>Tuesday AM: 51%, charged to 70%</li>
<li>Tuesday workout: 60%, charged to 79%</li>
<li>Wednesday AM: 63%, charged to 80%</li>
<li>Thursday AM: 49%, charged to 64%</li>
<li>Thursday workout: 48%, charged to 63%</li>
<li>Friday AM: 50%, charged to 65%</li>
<li>Saturday AM: 31%, charged to 100%</li>
</ul>
<p>Basically, I’m charging it when I get ready in the AM, which doesn’t quite catch it up for what it lost over the previous day. However, when I workout, I typically shower afterwards and this gives me an extra 15-20 minutes to charge it again. So, interestingly, I actualy use up the Band 2 battery <em>less</em> when I’m working out more.</p>
<h2 id="Cylcing_the_Charge"><a href="#Cylcing_the_Charge" class="headerlink" title="Cylcing the Charge"></a>Cylcing the Charge</h2><p>Most Saturdays I actually wear my Band until the battery warning goes off, then I plug it in until fully charged. I called into the Microsoft support line and asked if this was a good practice for using and charging the Band 2 - essentially letting it run down through the week and then giving it a complete charge on the weekend. The support technician on the call agreed that this was a good strategy and commented that she has a similar routine. In the two-and-a-half months of use, I have not seen depreciating performance on the battery life.</p>
<h2 id="Charging_Tips"><a href="#Charging_Tips" class="headerlink" title="Charging Tips"></a>Charging Tips</h2><p>Here’s a few things you can do to keep your Band 2 running all week:</p>
<ul>
<li>Keep your charger plugged in where you get ready in the AM</li>
<li>Clean the contacts before you attach the charger, and thouroughly after a workout</li>
<li>Try to let it run down once a week and give it a full charge</li>
<li>Buy a second charger if you need one, for example if you walk or ride to work</li>
</ul>
<p>Happy fitnessing!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2.png" alt="Band 2"></p>
<p>The day the announcement was made for Band 2, I was watching the keynote and keeping my finger on F5, repeatedly refreshing my browser and eagerly waiting for the Band 2 “Coming Soon” page turn over to an “Order Now” page. The week before launch, I added my credit card as a saved card on the Microsoft store. As soon as the page flipped over, I pulled the trigger and reserved my new edition.</p>
<p>I’ve worn it every day since November 2, 2015 and here’s what I’ve learned about the Microsoft Band 2 battery life, including tips on how to keep yours running <strong>all week long</strong>.</p>]]>
    
    </summary>
    
      <category term="Microsoft Band" scheme="http://jameschambers.com/tags/Microsoft-Band/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Your Work and Your Life are Not Intricately Intertwined]]></title>
    <link href="http://jameschambers.com/2016/01/work-is-not-life/"/>
    <id>http://jameschambers.com/2016/01/work-is-not-life/</id>
    <published>2016-01-11T02:24:09.000Z</published>
    <updated>2016-01-20T03:26:07.901Z</updated>
    <content type="html"><![CDATA[<p>You are <strong>always</strong> setting expectations. When you answer an email at 10pm, you are setting an expectation. When let a call go to voicemail at 6pm, you are setting an expectation.</p>
<p>These are difficult things to accept, especially if you’re in competition for advancement or your employer is challenging your boundaries on a regular basis, but just remember that resetting expectations is much more difficult that setting them in the first place. Remembering that every action you take (or don’t) defines how people will expect you to act in the future.<br><a id="more"></a></p>
<p>I am currently an employee and likely will be for the foreseeable future. My career aspirations do not include management despite the fact that I love to lead teams (there is a significant difference between the two, but I’ll save that for a different post). I firmly believe that you can lead a work life and a personal life that are largely disconnected and be quite successful doing so.</p>
<p>As someone who has found incredible happiness in the <em>balance</em> between a happy home life and spending an appropriate amount of time on my career, I recently read a post that did not sit well with me at all. In “distilling” everything down in to what was needed in order to be productive, the author lists a set of “rules” that include this: </p>
<blockquote>
<p>Embrace the fact that work and life are intricately intertwined </p>
</blockquote>
<p>I’m going to tell you right now: there are a lot of things wrong with this rule. The rest of that post is laden with info from other sources and a ton of exercises that I can’t see many people filling out, but the idea that I should somehow lose myself in dedication to work is terribly misguided. </p>
<p>Let’s break it down.</p>
<h2 id="First_Things_First"><a href="#First_Things_First" class="headerlink" title="First Things First"></a>First Things First</h2><p>I want to add some clarity to my thought process here. The most confused aspect of the aforementioned rule is that the terms used are not well-defined. I will do that here, defining what “work” actually means, and how it is a fundamentally different concept than your job or your career.</p>
<p>First, let’s talk about your <strong>work</strong>. Work is the list of assigned duties that you carry out, which often vary from day-to-day and may be transient in nature; you may be asked to perform a set of work for a prescribed period of time and later be assigned different work. For some people, their work will be consistent for the entirety of their employ, others it may change from month-to-month or day-to-day.  But this is a good segue as there is a difference between your work and your job.</p>
<p>Your <strong>job</strong> is the collection of work and tasks you perform in exchange for a pay cheque. Your job helps you meet your financial obligations and help to contribute to your household income. The tasks assigned are usually out of your control, though many forward-thinking organizations offer some freedom over long-term assignments and let you speak into the types of tasks you take on. Your experience in other, previous jobs will open doors for you to take on greater challenges in your next job, which may be within the same organization. Again, organizations that get this will help you form a path, leading you through more complicated work and increasingly important tasks en route to helping you move to more senior roles. Admittedly, not all career paths provide this opportunity, and that’s okay, too, the important thing is finding a job that supports your career.</p>
<p>Which leads me to the definition of <strong>career</strong>. Unlike the tasks you perform or the role you assume at a company, your career will never be fully articulated until you retire. That is, if retirement is indeed your endgame. If someone asks you what your career is today, your answer will likely be a point-in-time reflection of how you got to where you are. It is defined by the achievements you capture and the challenges you overcome. For some it will be a story of creativity and expression, for others it will be about dedication or service. </p>
<blockquote>
<p>I’d better drop a bonus definition in here: <strong>passion</strong>, in the context of “things you like to do”. Your passion is that thing that you’re likely thinking about or get easily distracted by. You’ve likely thought, “Someday I’d like to…” and completed that sentence with the thing that you want to be doing <em>now</em>. It can drive you and light you up and you are excited to talk about it with others. <em>That</em> is passion.</p>
</blockquote>
<p>Others still will explain their career as the vehicle they used to chase a passion, rather than something they were passionate about. As a concrete example example of that, I’ve demonstrated capabilities in software development and have been on this career path for 20 years now, writing code and leading teams. However, as much as I like writing code, my <em>passion</em> is actually learning, mentoring, sharing my work and teaching others. My career has allowed me to access my passion, and today I get to speak at conferences across North America and volunteer at the computer labs at local middle and high schools.</p>
<h2 id="What_You_Should_Really_Embrace"><a href="#What_You_Should_Really_Embrace" class="headerlink" title="What You Should Really Embrace"></a>What You Should Really Embrace</h2><p>Okay, so if you’re not going to embrace some kind of intertwined reality, what should you be chasing? </p>
<p>I believe the answer lies in sorting your crap out and remembering that the three things we talked about are tangible, distinct and sometimes disconnected or misaligned. Sometimes you won’t like the <strong>work</strong> you’re doing, but you will be completely happy with your <strong>job</strong>. Sometimes you take a <strong>job</strong> because you know you will enjoy the work for a period of time, but the <strong>job</strong> may not be helpful in advancing your <strong>career</strong>.</p>
<p>These things are okay, at least for a time. What you need to embrace is the fact that finding the perfect combination is very difficult, especially over the long haul. As your career objectives change, the job may no longer work for you as a tool to move down your career path. Sometimes you’ll have an incredible job - great employer, solid pay and awesome co-workers - but the work you’re assigned isn’t what you like to be doing. Some people – it’s happened to myself – will advance through an organization based on their performance into a role that they are not suitable for and will not find be successful at (this is known as the <a href="https://en.wikipedia.org/wiki/Peter_principle" target="_blank" rel="external">Peter Principle</a>).</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/Peters_principle.png" alt="Advancement through success can sometimes lead to failure"></p>
<p>Rather than thinking of things in rules, let’s instead think of things in truths. It is true that:</p>
<ul>
<li>You can have a job you love and be doing work that you don’t enjoy</li>
<li>The work you are doing may be fulfilling, but doesn’t give you opportunity to advance in your job</li>
<li>The job you have may serve you well today, but doesn’t align with your career</li>
<li>You can (and should try to) outgrow your job</li>
<li>What is considered a promotion by your employer may permanently lead to work that is not of your liking</li>
<li>Your choice in career may change, which can lead to instability in your happiness with your work and/or job</li>
<li>There is going to be work you don’t like to do in nearly every job you take</li>
<li>Your work, job and career may or may not help you operate inside your passion</li>
</ul>
<p>I don’t want to constantly attend to the negative, I want to focus on the things that are going right and look for signals that I am on the correct path. These green flags tell me that I am moving in the direction that I want to be in, and help me keep a healthy balance between my personal life and what I do in my job. When pondering where I’m at with my work, job and career, I ask myself questions from this reflection list:</p>
<ul>
<li>Do I have something to offer the people I work with and for?</li>
<li>Am I working with co-workers that can help me grow?</li>
<li>Is the work I am doing meaningful to me?</li>
<li>Does my job give me the freedom to think for myself?</li>
<li>Does the work I’m doing align with my ethics?</li>
<li>Is there a way for me to advance my career or follow my passion?</li>
<li>When I outgrow where I am, is there a place for me to go?</li>
<li>Does my job require effort within the bounds of a reasonable workday?</li>
<li>Am I still interested in the career story that is unfolding ahead of me?</li>
</ul>
<p>If I’ve got positive answers for several of these, I know I’m in a good spot. On the other hand, failing to meet my criteria here on a couple of points could be a sign that there needs to be a change of season. These questions may not be exactly what you need, but the exercise is what I believe we all need to embrace; the answers are dynamic and are going to change over time, so you need to find questions that help you identify your measure of happiness. </p>
<h2 id="An_Employer_u2019s_Role_in_Your_Work_2C_Job_and_Career"><a href="#An_Employer_u2019s_Role_in_Your_Work_2C_Job_and_Career" class="headerlink" title="An Employer’s Role in Your Work, Job and Career"></a>An Employer’s Role in Your Work, Job and Career</h2><p>In it’s simplest terms, I believe that an employer’s job begins with the assignment of meaningful, relevant tasks and ends with a paycheque. In between that space there is opportunity to challenge an employee, to contribute to their growth and provide guidance on how to develop their skills in such a way that it serves the company and helps to realize the goals of the individual, wherever possible. </p>
<p>As employees we have to concede that an employer is concerned with generating income in greater magnitude than expense as they execute the services their clients depend on. Even when we’re at a job we enjoy we will likely be tasked with actions we would not choose for ourselves. We need to be clear about our broader goals and, when appropriate, be honest when our <strong>work</strong> or our <strong>job</strong> is not checking off things from our reflection list.</p>
<p>If an employer is mentoring you to make your work part of your life, I boldly challenge you to push back and define strong bounds through which your work cannot cross. Someone in a mentorship role who guides employees with banter of blending work and life is clearly not interested in the career of the employee, and places higher weight on the importance of completed work than on the individual. I don’t want to work <em>there</em>. </p>
<h2 id="Why_Work_Isn_u2019t__u201CIntricately_Intertwined_u201D_With_Your_Life"><a href="#Why_Work_Isn_u2019t__u201CIntricately_Intertwined_u201D_With_Your_Life" class="headerlink" title="Why Work Isn’t “Intricately Intertwined” With Your Life"></a>Why Work Isn’t “Intricately Intertwined” With Your Life</h2><p>I will yield that the original post did not prescribe an explanation of “work”, which is why I have above, so I’ll argue this from the perspective of both “work” and “job” as I’ve defined in this article.</p>
<p>The separation of work is easy; work is a task and usually requires the context of your <em>work environment</em>. An engineer can’t complete blueprints without the requisite software, a counsellor cannot complete an evaluation without a patient and someone in janitorial cannot wax the floors without the buffing machine. And the floor. These are the types of things that can easily be slotted into your work schedule and, when you are good with time management, need not spill into your personal life on any regular frequency.</p>
<p>The separation of job and your life is a little less trivial. To avoid carrying the stress of the day home you need to have establish some good practices around “putting your tools down”, disconnecting from the office on your way <em>out</em> of the office. This is going to be something different for everybody, for me it involves tearing down my workspace, closing applications and checking code in. To prevent bigger picture concerns from affecting your home life such as the economy or the sustainability of the company you work at you need to regard your employment in the correct light, namely that it is part of your career, but likely doesn’t define it. And when your employer puts requirements into your job that breach your personal time, you will have some hard decisions to make.</p>
<p>Wherever you land, you need time to recharge. I agree with the sentiment from the original post that suggests multitasking can have a negative affect on you. How, then, can you intertwine work with playing with your kids? How do you answer emails when on a secluded retreat with your spouse? If getting in the zone is as easy as taking 10-15 minutes of focus, then do that <em>during the workday</em>. The important thing is to define the bounds of that workday and maintain them. </p>
<h2 id="Some_Well-Deserved_Exceptions"><a href="#Some_Well-Deserved_Exceptions" class="headerlink" title="Some Well-Deserved Exceptions"></a>Some Well-Deserved Exceptions</h2><p>I know some incredible folks who have taken entirely different walks of life than I. They have found success in ways that would not work for me, as I have found success in ways that may not work for you. Here are some scenarios where your workday may bleed more frequently into your personal life. </p>
<p><strong>The Self-Employed</strong> Running your own business is hard work. You may be working across time zones, you may have travel considerations and you need to react quickly to clients in order to collect the revenues you need to stay afloat.  </p>
<p><strong>Family Businesses</strong> While less common these days, the daily topics of family-run businesses will naturally find their way into conversations that happen outside of the work day. Reminders, follow-ups and even stress relief may happen when you find that every supper doubles as a staff party. </p>
<p><strong>Those Without Family</strong> I have friends who are not into the family scene and are living a single life. They have found that the cross-over tends to happen more naturally, but have also noted that they prefer to spend their time with friends or working on their career (versus servicing requests from work).</p>
<p><strong>When Travel is Required</strong> Travel is a tricky beast, but one that raises the requirement to really define when work starts and stops. As an obvious impairment to split out a normal work day, work-related travel increases the relevancy of strong boundaries when you are at home.  </p>
<p><strong>Crunch Times</strong> These are realities for most folks in most fields: as a project closes, an emergency arises or a deadline approaches, a little extra effort is going to be required. You’ll need to step up to successfully complete the tasks and stay in good standing with your employer.</p>
<p>In spite of these, I still believe that the cross-over time can be mitigated to a large degree. The important thing to do in these cases is to be more effective at communicating when the windows of work will be and ensuring that you have the support of those around you to help enforce it. Your husband or wife won’t know that you are expecting a call unless you’ve found a way to share it with them.</p>
<h2 id="What_to_do_With_All_of_This"><a href="#What_to_do_With_All_of_This" class="headerlink" title="What to do With All of This"></a>What to do With All of This</h2><p>First of all, don’t sell the farm. If you’re finding that something in your career, your job or your work is unsettling, make sure you have set of reasonable questions you can ask yourself to find out why. Talk with your employer about ways to make it right and, if needed, start to explore alternate work arrangements inside your organization, or outside of it.</p>
<p>One thing you can do, immediately, is to start blocking off time for your family and for you personally. This will help to give you time to connect with those that are important to you and reflect on what is becoming of your career. When I did this, I started to see - almost immediately - how I needed the time away from work in order to concentrate when I was there. It also paved the way for positive, sweeping changes in the time I spend with my wife and kids.</p>
<p>It would be remiss of me to omit some of the other beliefs that I have, namely that I put my family above my job, my ethics ahead of my work and my responsibility to my family’s obligations ahead of my personal interests. This means that I have had to make difficult decisions at times in order to maintain integrity and, to be honest, I suppose I’m still a long way out from knowing whether or not those were the right decisions. The best I can hope for is that hindsight reveals that the decisions were right at that time for who I was.</p>
<p>Here is <a href="http://joelfromcanada.com/gettingshitdone/" target="_blank" rel="external">the blog post I referenced</a>, if you’re interested.</p>
<p>I usually close by saying, “happy coding!” but in this case, this might be more appropriate: Happy career! :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You are <strong>always</strong> setting expectations. When you answer an email at 10pm, you are setting an expectation. When let a call go to voicemail at 6pm, you are setting an expectation.</p>
<p>These are difficult things to accept, especially if you’re in competition for advancement or your employer is challenging your boundaries on a regular basis, but just remember that resetting expectations is much more difficult that setting them in the first place. Remembering that every action you take (or don’t) defines how people will expect you to act in the future.<br>]]>
    
    </summary>
    
      <category term="Life Hack" scheme="http://jameschambers.com/tags/Life-Hack/"/>
    
      <category term="Practice of Awesome" scheme="http://jameschambers.com/tags/Practice-of-Awesome/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Humanitarian Toolbox AllReady Code-a-Thon]]></title>
    <link href="http://jameschambers.com/2015/11/the-humanitarian-toolbox-allready-code-a-thon/"/>
    <id>http://jameschambers.com/2015/11/the-humanitarian-toolbox-allready-code-a-thon/</id>
    <published>2015-11-18T15:22:00.000Z</published>
    <updated>2016-01-20T03:26:07.336Z</updated>
    <content type="html"><![CDATA[<p>I was recently in Seattle for the MVP Summit, one of the best ways to connect to product teams and really smart people from around the world. Every year I get to meet more of the team that builds the tools I use daily, reconnect with peers and catch up with friends. And I eat at Magiano’s.</p>
<p>But this year, the MVP Summit was trumped in awesomeness as quickly at it came to a close as the very next morning the code-a-thon for the Humanitarian Toolbox kicked into high gear.</p>
<a id="more"></a>
<p><strong><font color="#333333">Want to join the cause?</font></strong> The easiest way to get started is to join our weekly Saturday morning call. We are online from 10AM CST to Noon CST every Saturday. <a href="http://twitter.com/CanadianJames" target="_blank" rel="external">Watch Twitter –&gt;</a> for the link just before 10AM. </p>
<p>There are a lot of great projects out there. AllReady is great software with great purpose as well.</p>
<h2 id="Hack_for_a_Cause"><a href="#Hack_for_a_Cause" class="headerlink" title="Hack for a Cause"></a>Hack for a Cause</h2><p>Whenever disaster strikes a community – a forest fire, a tsunami, an earthquake – lives are impacted. Sadly, those with the fewest resources are often the ones at most risk after the disaster.</p>
<p>From November 6th to the 8th I was privileged to join in with about twenty other individuals from around the world to work on <a href="http://www.htbox.org/blog/allready-project-launched-at-visual-studio-2015-release-event" target="_blank" rel="external">AllReady</a>, an open source project that is curated by the Humanitarian Toolbox. AllReady is software that helps communities <em>organize</em> and <em>execute</em> efforts in preparedness so that those who are at risk are better equipped to make it out of a disaster in the best shape possible.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb.png" alt="image" title="image"></a></p>
<p>The group of us descended to the Garage at Building 27 on Microsoft Campus. We hunkered down, plowed through hundreds of commits and many dozens of issues and pull requests.</p>
<p>It was an amazing experience. It was a group of really smart people, supported by folks on the ASP.NET team, building software that is going to change lives.</p>
<p>To find out more about the awesome work that The Humanitarian Toolbox is doing, please <a href="http://htbox.org" target="_blank" rel="external">visit their site</a>.</p>
<h2 id="Hack_for_Yourself"><a href="#Hack_for_Yourself" class="headerlink" title="Hack for Yourself"></a>Hack for Yourself</h2><p>There is a huge draw to dive in and help with a project that can affect so many people and thwart the negative impact of unfortunate conditions. Preparedness is so much more effective than disaster recovery.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb1.png" alt="image" title="image"></a></p>
<p>So…it’s a good reason to get involved. But if that’s not enough, check out this tech stack:</p>
<ul>
<li>ASP.NET 5</li>
<li>MVC Framework 6</li>
<li>Azure Web Apps (Sites and Jobs)</li>
<li>Azure Storage (Tables and Queues)</li>
<li>AutoFac as the IoC container</li>
<li>MediatR as a messaging bus &amp; pub/sub provider</li>
<li>Entity Framework 7</li>
<li>GitHub and AppVeyor</li>
<li>SendGrid and Twilio</li>
</ul>
<p>I mean, <em>just look at that list</em>. That’s like…<strong>all</strong> the buzzwords. And jumping in to help on this project is also jumping in to learn. This is an opportunity to work with world-class developers on a project that is striving to have great architecture. It runs on the cloud in cloud-like ways and uses technology that is going to be used for the next 5-10 years and beyond. </p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image2.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb2.png" alt="image" title="image"></a></p>
<p>After the weekend, we drew to a close by having a retrospective where we worked through the next steps and where this project is headed. It’s exciting to see the momentum building as more community members come on board and start making commits.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image3.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb3.png" alt="image" title="image"></a></p>
<p>We’ve got a lot done in just a few weeks, and I’m excited to see it moving forward <em>daily</em>.&nbsp; </p>
<h2 id="Join_In_and_Start_Hacking"><a href="#Join_In_and_Start_Hacking" class="headerlink" title="Join In and Start Hacking"></a>Join In and Start Hacking</h2><p>The best part about the software is that everyone can contribute. I’m not going to lie, there are some advanced aspects of the project that will be hard to work through for junior developers. There are more aspects, still, that need the love of some senior developers. Regardless of where you are in the world or in your career, there is likely a task where you can get started. </p>
<ul>
<li>Fork the <a href="https://github.com/HTBox/allready" target="_blank" rel="external"><u>AllReady repo</u></a> on GitHub</li>
<li>Follow <a href="https://twitter.com/htbox" target="_blank" rel="external"><u>HTbox on Twitter</u></a></li>
<li>Read the <a href="http://www.htbox.org/blog" target="_blank" rel="external"><u>HTbox blog</u></a></li>
</ul>
<p>If you have questions, reach out to me <a href="http://twitter.com/CanadianJames" target="_blank" rel="external"><u>on Twitter</u></a> and I’ll help to get you started. </p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/11/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I was recently in Seattle for the MVP Summit, one of the best ways to connect to product teams and really smart people from around the world. Every year I get to meet more of the team that builds the tools I use daily, reconnect with peers and catch up with friends. And I eat at Magiano’s.</p>
<p>But this year, the MVP Summit was trumped in awesomeness as quickly at it came to a close as the very next morning the code-a-thon for the Humanitarian Toolbox kicked into high gear.</p>]]>
    
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="open source" scheme="http://jameschambers.com/tags/open-source/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
      <category term="Conferences" scheme="http://jameschambers.com/categories/Beyond-Code/Conferences/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ApiController in ASP.NET 5? Nopesauce.]]></title>
    <link href="http://jameschambers.com/2015/11/apicontroller-in-asp-net-5-nopesauce/"/>
    <id>http://jameschambers.com/2015/11/apicontroller-in-asp-net-5-nopesauce/</id>
    <published>2015-11-03T04:39:31.000Z</published>
    <updated>2016-01-20T03:26:04.042Z</updated>
    <content type="html"><![CDATA[<p>If you’re developing in ASP.NET Web API you are familiar with the concept of inheriting from the base ApiController class. This class is still around in ASP.NET 5, but it is likely not meant for you to use.&nbsp; Here’s why your cheese has moved.</p>
<a id="more"></a>
<p><strong>TL;DR</strong>: Going forward, you’re going to inherit from Controller instead of ApiController, or from nothing at all. </p>
<h2 id="How_We_Used_to_Do_It"><a href="#How_We_Used_to_Do_It" class="headerlink" title="How We Used to Do It"></a>How We Used to Do It</h2><p>This is pretty much the bread and butter of a new controller in an old Web API 2.0 project:</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : ApiController<br>{<br>    [HttpGet]<br>    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()<br>    {<br>        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">“value1”</span>, <span class="str">“value2”</span> };<br>    }<br>}</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Nothing really too interesting here. We’re inheriting from a base class so we get some methods to leverage for return types, we can access the identity of the user through an IPrincipal and we have an HttpContext available to inspect the request and modify the response.</p>
<h2 id="How_to_Do_it_Now"><a href="#How_to_Do_it_Now" class="headerlink" title="How to Do it Now"></a>How to Do it Now</h2><p>In ASP.NET 5 we don’t have the ApiController to inherit from, at least not out of the box. Instead we inherit from the Controller class.</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : Controller<br>{<br>    [HttpGet]<br>    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()<br>    {<br>        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">“value1”</span>, <span class="str">“value2”</span> };<br>    }<br>}</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Pretty easy, right? We actually have three less characters. Some pieces have moved around such as Request and Response objects that live as properties at the class level, and our User is now a ClaimsPrincipal instead of an IPrincipal. You’ll also find that there’s a host of other things that do not seem really relevant at first glance to Web API (things like the service resolver and TempData).</p>
<p>These extra bits are peripheral, however; the takeaway is actually that we no longer have two separate sets of classes that represent concerns like controllers or routing, and we can go about getting at the important parts of the request in the same way from both types of controllers – there really is just one now.</p>
<h2 id="If_You_Still_Want_to_Do_It_Now_How_We_Used_To"><a href="#If_You_Still_Want_to_Do_It_Now_How_We_Used_To" class="headerlink" title="If You Still Want to Do It Now How We Used To"></a>If You Still Want to Do It Now How We Used To</h2><p>There are perfectly good reasons to keep using the old format, perhaps you’re at the start of a port project or some have some other reason to stay as-was. No problem, you’re just going to have to pull in another package as it’s not part of your project template by default. Simply edit your project.json to include the following package:</p>
<p><pre class="csharpcode">Microsoft.AspNet.Mvc.WebApiCompatShim</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>While this <em>is</em> here and you _can _use it, it’s also likely a good time to evaluate if you <em>need</em> to use it. There are only a small set of refactorings that are required in order to use the unified interface and you can be </p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Make sure you’ve got <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">Visual Studio 2015</a>, you have <a href="http://docs.asp.net/en/latest/getting-started/installing-on-windows.html" target="_blank" rel="external">the latest beta installed</a> (at time of writing, beta 8), and give it a try. Happy coding <img src="https://jcblogimages.blob.core.windows.net/img/2015/11/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you’re developing in ASP.NET Web API you are familiar with the concept of inheriting from the base ApiController class. This class is still around in ASP.NET 5, but it is likely not meant for you to use.&nbsp; Here’s why your cheese has moved.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Web API" scheme="http://jameschambers.com/tags/Web-API/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Supporting Options and Arguments in Your dnx Commands]]></title>
    <link href="http://jameschambers.com/2015/09/supporting-options-and-arguments-in-your-dnx-commands/"/>
    <id>http://jameschambers.com/2015/09/supporting-options-and-arguments-in-your-dnx-commands/</id>
    <published>2015-09-08T18:00:00.000Z</published>
    <updated>2016-01-20T03:26:07.206Z</updated>
    <content type="html"><![CDATA[<p>Grab yourself your copy of <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external"><u>Visual Studio 2015</u></a> and buckle up! Today we’re going to create our own dnx command with support for options and arguments.</p>
<a id="more"></a>
<p>In my <a href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/"><u>previous post</u></a> on dnx commands I showed how you could create your own command as part of your project that could be invoked via the .Net Execution Environment, a.k.a., dnx. While this works fine in simple scenarios, chances are you might need to have more than one “command” embedded in your tooling. Right away you have concerns for parsing the arguments and options that are passed in, which will quickly lead to a more complex application than you were originally intending.</p>
<p><strong>Important Note</strong>&nbsp; I am building the samples here in this post on Beta 6, knowing that there are two changes coming in, the first is that they are dropping the project path argument to dnx (the period, or “current directory”), and the second being the high likelihood that there will continue to be refinements in the namespaces of these libraries. I’ll update these when I complete my upgrade to Beta 7.</p>
<h2 id="A_Real-world_Example"><a href="#A_Real-world_Example" class="headerlink" title="A Real-world Example"></a>A Real-world Example</h2><p>Consider Entity Framework, where you can access a number of different commands. It provides tooling to your application by making a number of commands related to your project, your entities, your database and your context available from the command line. This is great, because it also means that you can use it in automation tasks.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image2.png" alt="image" title="image"></p>
<p>Here’s the command as executed from the command line, followed by a call to get the help on a specific command, migration:</p>
<pre class="csharpcode">dnx . ef
dnx . ef migration -h</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

So, think about those switches for a second, and the mistakes and string manipulation you’d need to do to pull that all together. What about supporting help and organizing your commands? Being able to accept different options and arguments can grow to be an exhausting exercise in bloat…

## Unless!

…unless, of course, you had an abstraction over those parsing bits to work with.&nbsp; Quite wonderfully, Microsoft has made available the bits you need to take away those pains, and it all starts with the following package (and a bit of secret sauce):
<pre class="csharpcode">Microsoft.Framework.CommandLineUtils.Sources</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

And here’s the secret sauce…instead of using something like “1.0.0-*” for your version, use this instead: { "version": "1.0.0-*", "type": "build" }. This notation bakes the abstractions into your application so that you don’t have to bundle and distribute multiple DLLs/dependencies when you author and share commands.

The full version of the final, working project in this post is [available on GitHub](https://github.com/MisterJames/DnxCommandsWithOptsArgs/). Feel free to pull down a copy and try this out for yourself!

Let’s get started.

## Creating a Project

As [<u>previously covered</u>](http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/), creating an ASP.NET 5 command line app is all that is required to get started with creating your commands. We have to add that package as a dependency as well, which should look like this in it’s entirety in your project.json:
<pre class="csharpcode"><span class="str">"dependencies"</span>: {
  <span class="str">"Microsoft.Framework.CommandLineUtils.Sources"</span>: { <span class="str">"version"</span>: <span class="str">"1.0.0-*"</span>, <span class="str">"type"</span>: <span class="str">"build"</span> }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Next, we need to make sure that our command is available and named as we’d like it to be called, which is also done in the project.json. Mine looks like this:
<pre class="csharpcode"><span class="str">"commands"</span>: {
  <span class="str">"sample-fu"</span>: <span class="str">"DnxCommandArguments"</span>
},</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

You can imagine, of course, that it will be invoked much like Entity Framework, but with “sample-fu” instead of “ef”. Feel free to name yours as you wish. With that out of the way, we can start to do the heavy lifting in getting our commands exposed to external tooling.

## Working with the CommandLineUtils Objects

Here is a bare-bones application that just displays it’s own help message:
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">int</span> Main(<span class="kwrd">string</span>[] args)
{
    var app = <span class="kwrd">new</span> CommandLineApplication
    {
        Name = <span class="str">"sample-fu"</span>,
        Description = <span class="str">"Runs different methods as dnx commands"</span>,
        FullName = <span class="str">"Sample-Fu - Your Do-nothing dnx Commandifier"</span>
    };

    <span class="rem">// show the help for the application</span>
    app.OnExecute(() =&gt;
    {
        app.ShowHelp();
        <span class="kwrd">return</span> 2;
    });

    <span class="kwrd">return</span> app.Execute(args);
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

You can see that our Main method is basically creating an instance of the CommandLineApplication class, initializing some properties and finally wiring up a Func to be executed at some point in the future.&nbsp; Main returns the result of app.Execute, which in turn handles the processing of anything passed in and itself returns the appropriate value (0 for success, anything else for non-success).&nbsp; Here it is in action (the completed version), simply by typing dnx . sample-fu at the commandline:

![image](https://jcblogimages.blob.core.windows.net/img/2015/09/image3.png "image")

A quick note here as well…the OnExecute() is called if no other command turns out to be appropriate to run, as determined by the internal handling in CommandLineApplication. In effect, we’re saying, “If the user passes nothing in, show the help.” Help is derived from the configuration of commands, so to illustrate that, we need to add one.

## Wiring Up a Command

Now we get into the fun stuff. Let’s write a command that takes a string as an argument and echos it right back out, and add an option to reverse the string.
<pre class="csharpcode">app.Command(<span class="str">"display"</span>, c =&gt;
{
    c.Description = <span class="str">"Displays a message of your choosing to console."</span>;

    var reverseOption = c.Option(<span class="str">"-r|--reverse"</span>, <span class="str">"Display the message in reverse"</span>, CommandOptionType.NoValue);
    var messageArg = c.Argument(<span class="str">"[message]"</span>, <span class="str">"The message you wish to display"</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        var message = messageArg.Value;
        <span class="kwrd">if</span> (reverseOption.HasValue())
        {
            message = <span class="kwrd">new</span> <span class="kwrd">string</span>(message.ToCharArray().Reverse().ToArray());
        }
        Console.WriteLine(message);
        <span class="kwrd">return</span> 0;
    });
});
</pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>Command takes a name and an action in which we can add our options and arguments and process the input as required.&nbsp; We write a Func for OnExecute here as well, which will be called if the user types the command “display”.&nbsp; The option is implemented as a “NoValue” option type, so the parser is not expecting any value…it’s either on the command line or it isn’t.

The order of args is important, using the pattern:

<font face="Lucida Console">&nbsp;&nbsp;&nbsp; COMMAND OPTIONS ARGUMENTS</font>

You’ll get some errors if you don’t follow that order (and there are some open GitHub issues to help make better parsing and error messages available).

## A More Complicated Example

Next up, let’s implement a command that can do one of two operations based on the option specified, and takes two values for an argument. Here a basic implementation of a calc method, supporting addition and multiplication:
<pre class="csharpcode"><span class="rem">//  the "calc" command</span>
app.Command(<span class="str">"calc"</span>, c =&gt;
{
    c.Description = <span class="str">"Evaluates arguments with the operation specified."</span>;

    var operationOption = c.Option(<span class="str">"-o|--operation &lt;OPERATION&gt;"</span>, <span class="str">"You can add or multiply the terms specified using 'add' or 'mul'."</span>, CommandOptionType.SingleValue);
    var termsArg = c.Argument(<span class="str">"[terms]"</span>, <span class="str">"The numbers to use as a term"</span>, <span class="kwrd">true</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        <span class="rem">// check to see if we got what we were expecting</span>
        <span class="kwrd">if</span> (!operationOption.HasValue())
        {
            Console.WriteLine(<span class="str">"No operation specified."</span>);
            <span class="kwrd">return</span> 1;
        }
        <span class="kwrd">if</span> (termsArg.Values.Count != 2)
        {
            Console.WriteLine(<span class="str">"You must specify exactly 2 terms."</span>);
            <span class="kwrd">return</span> 1;
        }

        <span class="rem">// perform the operation</span>
        var operation = operationOption.Value();
        var term1 = <span class="kwrd">int</span>.Parse(termsArg.Values[0]);
        var term2 = <span class="kwrd">int</span>.Parse(termsArg.Values[1]);
        <span class="kwrd">if</span> (operation.ToLower() == <span class="str">"mul"</span>)
        {
            var result = term1 * term2;
            Console.WriteLine($<span class="str">" {term1} x {term2} = {result}"</span>);
        }
        <span class="kwrd">else</span>
        {
            var result = term1 + term2;
            Console.WriteLine($<span class="str">" {term1} + {term2} = {result}"</span>);
        }
        <span class="kwrd">return</span> 0;
    });
});</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Of note are the differences between the options and the arguments versus the first command. The option accepts one of two values, and the argument can accept exactly two values. We have to do a bit of validation on our own here, but these are the basic mechanics of getting commands working.</p>
<p>Taking it to the next level, you may wish to encapsulate your code in a class, or leverage the fact that DNX (and thus, your commands) are aware of the project context that you are running in…remember that if you are running in a project directory, you have the ability to read from the project.json.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Be sure to grab <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external"><u>Visual Studio 2015</u></a> and then start experimenting with commands. You can have a look at some of the other repos/projects that leverage CommandLineUtils, or check out the <u><a href="https://github.com/MisterJames/DnxCommandsWithOptsArgs/" target="_blank" rel="external">completed project from this post on GitHub</a></u>.</p>
<p>Happy Coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/09/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Grab yourself your copy of <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205"><u>Visual Studio 2015</u></a> and buckle up! Today we’re going to create our own dnx command with support for options and arguments.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="DNX" scheme="http://jameschambers.com/tags/DNX/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Upgrading NPM in Visual Studio 2015]]></title>
    <link href="http://jameschambers.com/2015/09/upgrading-npm-in-visual-studio-2015/"/>
    <id>http://jameschambers.com/2015/09/upgrading-npm-in-visual-studio-2015/</id>
    <published>2015-09-02T08:15:17.000Z</published>
    <updated>2016-01-20T03:26:07.550Z</updated>
    <content type="html"><![CDATA[<p>Visual Studio 2015 (<u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">download here</a></u>) ships with it’s own version of several external tools, such as grunt, node and npm.&nbsp; Typically, you’d have to wait for newer versions of VS to ship if you want them updated. <a id="more"></a>If you are wanting to take advantage of newer versions of these tools, you have three options:</p>
<ol>
<li>Wait for VS 2015 to upgrade the tooling and ship an update.</li>
<li>Hack the tooling proxies used by Visual Studio.</li>
<li>Use the built-in external tool path editor to slip your updated versions in.</li>
</ol>
<p>Waiting for updates is no fun. Let’s hack a little.</p>
<h2 id="Wait_a_minute_21_Why_are_we_doing_this_3F"><a href="#Wait_a_minute_21_Why_are_we_doing_this_3F" class="headerlink" title="Wait a minute! Why are we doing this?"></a>Wait a minute! Why are we doing this?</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/09/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image_thumb.png" alt="image" title="image"></a>For me the primary motivator was the path length limitations in Windows. Nested node_modules folders buried 19 levels deep is no fun when you hit the max path length. For me, I was trying to share the files on OneDrive and hit 255 characters pretty quickly.</p>
<p>Older versions of npm resolved package dependencies by pulling in a package, creating a node_modules folder inside of it, then putting all the packages in there. Except, of course, if one of those packages contained more dependencies, then we were into the recursive bits of package resolution and very deep paths, ultimately toppling a lot of Windows tooling.</p>
<p>The latest major version of npm – version 3.0.x and above – creates a flat store of packages (very similar to what we know in NuGet) and only pulls one copy of each required version of each required package. Much nicer. So, back to the dicing!</p>
<h2 id="Hacking_up_the_VS_Tooling_Proxies"><a href="#Hacking_up_the_VS_Tooling_Proxies" class="headerlink" title="Hacking up the VS Tooling Proxies"></a>Hacking up the VS Tooling Proxies</h2><p>These are pretty straightforward, once you find them. For me, they were located in the following directory:</p>
<p>C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\Web Tools\External</p>
<p>For example, here the entire contents of npm.cmd:</p>
<p><pre class="csharpcode"><span class="str">@”%~dp0\node\node”</span> <span class="str">“%~dp0\npm\node_modules\npm\bin\npm-cli.js”</span> %<em></em></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /</em>white-space: pre;*/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>The %~dp0 is the old command line way of bringing the current drive letter (the d in the command), the path (the letter p here) and the current directory of the executing script (represented by 0) into context. So, basically, “start from where you’re running”. It’s a very hard-to-read version of “.” in most other notations. So, the command is running node (which is an exe), passing in the VS version of npm, and pushing into it the rest of the parameters that were passed along. So, when VS issues an “npm install”, this command kicks in, runs npm via node and passes “install” as the command to npm. </p>
<p>With that knowledge, we can simply update the call that is proxied through to our current version. I installed node (which includes npm), then updated npm to the latest version (thanks to <a href="https://www.npmjs.com/package/npm-windows-upgrade" target="_blank" rel="external"><u>this module</u></a>) and updated my npm.cmd to the following:</p>
<p><pre class="csharpcode"><span class="str">@”C:\Program Files (x86)\nodejs\node.exe”</span> <span class="str">“C:\Program Files (x86)\nodejs\node_modules\npm\bin\npm-cli.js”</span> %<em></em></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /</em>white-space: pre;*/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Of course, here be dragons: I have no idea how stable this will be with updates to VS, and/or how badly you may be crippling features if you mess this up. So, make sure you take a backup of your scripts before modifying them.&nbsp; This will be super-handy if you have some other requirement – like the order of params on tooling changes – but otherwise likely isn’t needed. Thankfully, there is a UI-way of doing this, too.</p>
<h2 id="Not_Hacking_Your_Visual_Studio_Tooling"><a href="#Not_Hacking_Your_Visual_Studio_Tooling" class="headerlink" title="Not Hacking Your Visual Studio Tooling"></a>Not Hacking Your Visual Studio Tooling</h2><p>Probably a more pleasing solution for your boss.</p>
<p>This one is pretty straightforward as well, and can be done by right-clicking on the “Dependencies” node in Solution Explorer, or by typing “external web tools” in the QuickLaunch bar. </p>
<p>From here, just add a new entry and move it to the top. For me, npm is located in the nodejs install directory, and this is good enough to get VS to see it first.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/09/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image_thumb1.png" alt="image" title="image"></a></p>
<p>Note, I did seem to have some issues with caching and/or gremlins here, so you may need to restart Visual Studio for the tooling paths to be picked up.</p>
<h2 id="What_I_Don_u2019t_Like"><a href="#What_I_Don_u2019t_Like" class="headerlink" title="What I Don’t Like"></a>What I Don’t Like</h2><p>Couple of things here that I don’t care for:</p>
<ol>
<li><strong>Not consistent between team members</strong>: there seems to be no way to put in your solution/project a hint at the version of tooling you wish to use. In my case, a developer with npm 2 trying to run an install off of OneDrive would fail.</li>
<li><strong>Visual Studio external tools are internal</strong>: yeah, you read that right. I’m not a fan of the way these projects are packed in, in such a way that the path to update them or pick versions is non-obvious.</li>
</ol>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Not too much to do, but if you run into long paths, nested node_modules kicking your butt or other out-of-date tooling, this should get you on your way.</p>
<p>Make sure you grab your <u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">copy of VS 2015</a></u> and start diving into the next phase of our careers!</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/09/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Visual Studio 2015 (<u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205">download here</a></u>) ships with it’s own version of several external tools, such as grunt, node and npm.&nbsp; Typically, you’d have to wait for newer versions of VS to ship if you want them updated.]]>
    
    </summary>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="node" scheme="http://jameschambers.com/tags/node/"/>
    
      <category term="npm" scheme="http://jameschambers.com/tags/npm/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Writing Custom Commands for DNX with ASP.NET 5.0]]></title>
    <link href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/"/>
    <id>http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/</id>
    <published>2015-08-11T07:30:07.000Z</published>
    <updated>2016-01-20T03:26:07.992Z</updated>
    <content type="html"><![CDATA[<p>If you are a developer on the .NET stack, you’ve now got access to a great new extension to your development environment. DNX, or the .NET Execution Environment, is a powerful new extensibility point that you can leverage to build project extensions, cross-platform utilities, build-time extensions and support for automation. In this article I’ll walk you through the process of building your own custom DNX command on top of ASP.NET 5.0.</p>
<a id="more"></a>
<h2 id="Where_You_u2019ve_Seen_It"><a href="#Where_You_u2019ve_Seen_It" class="headerlink" title="Where You’ve Seen It"></a>Where You’ve Seen It</h2><p>DNX has the ability to scan a project.json and look for commands that you install as packages or that you create yourself. If you’ve started following the examples of the MVC Framework or perhaps with Entity Framework, you may have seen things like this in your project.json:</p>
<pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"web"</span>: <span class="str">"Microsoft.AspNet.Hosting --config hosting.ini"</span>,
    <span class="str">"ef"</span>: <span class="str">"EntityFramework.Commands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

[![image](https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb2.png "image")](https://jcblogimages.blob.core.windows.net/img/2015/08/image5.png)These entries are here so that DNX understands the alias you assign (such as “web” or “ef”) and how it maps to an assembly that you’ve created or taken on as a dependency.&nbsp; The EF reference is quite straightforward above, simply saying that any call to “ef” via DNX will go into the entry point in EntityFramework.Commands.&nbsp; You would invoke that as follows from the directory of your _project_:
<pre class="csharpcode">dnx . ef </pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

All parameters that are passed in are available to you as well, so if you were to instead use:
<pre class="csharpcode">dnx . ef help migration</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Then EF would be getting the params “help migrations” to parse and process. As can be clearly seen in the “web” alias, you can also specify defaults that get passed into the command when it is executed, thus, the call to web in the above project.json passes in the path and filename of the configuration file to be used when starting IIS express. 

There is no special meaning to “ef” or “web”. These are just names that you assign so that the correct mapping can be made. If you changed “ef” to “right-said-fred” you would be able to run migrations from the command line like so:
<pre class="csharpcode">dnx . right-said-fred migration add too-sexy</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Great! So you can create commands, pass in parameters and share these commands through the project.json file. But now what?

## Now What?

I’m so glad you asked!

So far things really aren’t too different from any other console app you might create. I mean, you can parse args and do whatever you like in those apps as well.

But here’s the winner-winner-chicken-dinner bits: did you notice the “.” that is passed into DNX? That is actually the path to the project.json file, and this is important. 

*Important Note*: From beta 7 onward (or already if you’re on the nightly builds) DNX will implicitly run with an appbase of the current directory, removing the need for the “.” in the command. I’ll try to remember to come back to this post to correct that when beta 7 is out in the wild. Read more about the change on the [ASP.NET Announcement repo](https://github.com/aspnet/Announcements/issues/52) on GitHub.

DNX doesn’t actually do a lot on its own, not other than providing an execution context under which you can run your commands. But this is a good thing! By passing in the path to a project.json, you feed DNX the command mappings that you want to use, and in turn, DNX provides you with all of the benefits of running inside of the ASP.NET 5.0 bits. Your console app just got access to Dependency Injection as a first-class citizen in your project, with access to information about whichever app it was that contained that project.json file.&nbsp; 

Consider the EF command mapping again for migrations for a second: what is going on when you tell it to add a migration?&nbsp; It goes something like this:

1.  DNX looks for the project.json at the path you provide
2.  It parses the project.json file and finds the command mapping associated with your statement
3.  I **_creates an instance_** of the class that contains your command, injecting environment and project information as is available
4.  It checks the rest of what you’ve passed in, and invokes the command, passing in any parameters that you’ve supplied

## How to Build Your Own

This is actually super easy!&nbsp; Here’s what you need to do:

1.  Create a new ASP.NET 5 Console Application in Visual Studio 2015
2.  Add any services interfaces you need as parameters to the constructor of the Program class – but this is optional in the “hello dnx” realm of requirements
3.  Add your logic to your Main method – start with something as simple as a Console.WriteLine statement

From there, you can drop to a command line and run your command. That’s it!

*Pro Tip* You can easily get a command line in your project folder by right-clicking on the project in Solution Explorer and selecting “Open Folder in File Explorer”. When File Explorer opens, simply type in “cmd” or “powershell” in the location bar and you’ll get your shell.

The secret as to why it works from the console can be found in your project.json: when you create a console app from the project templates, the command alias mapping for your project is automatically added to your project.&nbsp; In this same way, along with referencing your new command project, _other projects_ can now consume your command.

## Beyond Hello World

It is far more likely that you’re going to need to do something in the context of the project which uses your command. Minimally, you’re likely going to need some configuration drawn in as a default or as a parameter in your command. Let’s look at how you would take that hello world app you created in three steps and do something a little more meaningful with it.

First, let’s add some dependencies to your project.json:

<pre class="csharpcode">  <span class="str">"dependencies"</span>: {
    <span class="str">"Microsoft.Framework.Runtime.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Json"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.UserSecrets"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.CommandLine"</span>: <span class="str">"1.0.0-beta6"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Now let’s add a new JSON file to our project called config.json with the following contents:

<pre class="csharpcode">{
  <span class="str">"command-text"</span>: <span class="str">"Say hello to my little DNX"</span>
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Getting there. Next, let’s bulk up the constructor of the Program class, add a private member and a Configuration property:

<pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">readonly</span> IApplicationEnvironment _appEnv;

<span class="kwrd">public</span> Program(IApplicationEnvironment appEnv)
{
    _appEnv = appEnv;
}

<span class="kwrd">public</span> IConfiguration Configuration { get; set; }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

We also need to add a method to Program that handles loading the config, taking in what it can from the config file, but loading on top of that any arguments passed in from the console:
<pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">void</span> BuildConfiguration(<span class="kwrd">string</span>[] args)
{
    var builder = <span class="kwrd">new</span> ConfigurationBuilder(_appEnv.ApplicationBasePath)
        .AddJsonFile(<span class="str">"config.json"</span>)
        .AddCommandLine(args);

    Configuration = builder.Build();
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Finally, we’ll add a little more meat to our our Main method:
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
{
    BuildConfiguration(args);

    Console.WriteLine(Configuration.Get(<span class="str">"command-text"</span>));
    Console.ReadLine();
}</pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>The above sample can now be executed as a command. I’ve got the following command mapping in my project.json file (yes, the same project you use to create the command can also expose the command):
<pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"DnxCommands"</span>: <span class="str">"DnxCommands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This means that from the console in the dir of my project I can just type in the following: </p>
<p><pre class="csharpcode">dnx . DnxCommands</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>I can also now reference this project from any other project (or push my bits to NuGet and share them to any project) and use the command from there. Other projects can add the “command-text” key to their config.json files and specify their own value, or they can feed in the parameter as an arg to the command:</p>
<p><pre class="csharpcode">dnx . DnxCommands command-text=<span class="str">“‘Pop!’ goes the weasel”</span></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>In my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank" rel="external">sample solution on GitHub</a>, I also have a second project which renames the alias and has it’s own config file that is read in by the command.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>All of this opens the doors for some pretty powerful scenarios. Think about what you can do in your build pipeline without having to write, expose and consume custom msbuild targets. You can create commands that are used to build up local databases for new environments or automate the seeding of tables for integration tests. You could add scaffolders and image optimizers and deployment tools and send text messages to your Grandma. </p>
<p>What you should do next is to look at the kinds of things you do when you’re working on your solution – not in it – and think about how you might be able to simplify those tasks. If there are complex parts of your build scripts that you encounter from one project to the next, perhaps you can abstract some of those bits away into a command and then shift to using simplified build scripts that invoke your commands via DNX.</p>
<p>To get some inspiration, check out my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank" rel="external">sample project on GitHub</a>, the DNX commands for other libraries (such as <a href="https://github.com/aspnet/EntityFramework/tree/dev/src/EntityFramework.Commands" target="_blank" rel="external">EF</a> or <a href="https://github.com/xunit/dnx.xunit/" target="_blank" rel="external">xUnit</a>) and try writing a few of your own.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/08/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are a developer on the .NET stack, you’ve now got access to a great new extension to your development environment. DNX, or the .NET Execution Environment, is a powerful new extensibility point that you can leverage to build project extensions, cross-platform utilities, build-time extensions and support for automation. In this article I’ll walk you through the process of building your own custom DNX command on top of ASP.NET 5.0.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Converting .NET 4.6 Projects to the VS 2015 Project System]]></title>
    <link href="http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/"/>
    <id>http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/</id>
    <published>2015-08-10T19:47:06.000Z</published>
    <updated>2016-01-20T03:26:04.656Z</updated>
    <content type="html"><![CDATA[<p>To take advantage of multi-targeted outputs from our project – allowing our assemblies to be used from multiple frameworks across the organization – we want to upgrade our projects to use the new project system in Visual Studio 2015. Previously, we would have needed a base project and then a separate project for each framework target (PCL, 4.5, 3.5, 4.5.2, etc), but in today’s solutions we can have a single project output all of the assets we wish to support.</p>
<p><em>In this series we’re working through the conversion of <a href="http://clear-measure.com/" target="_blank" rel="external">Clear Measure’s</a> <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/" target="_blank" rel="external">Bootcamp MVC</a> 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"><em>intro page</em></a><em>.</em></p>
<h2 id="Recreating_the_Solution_and_Projects"><a href="#Recreating_the_Solution_and_Projects" class="headerlink" title="Recreating the Solution and Projects"></a>Recreating the Solution and Projects</h2><p>As of right now, there are no tools in place that would support an in-place migration from the old project system to the new one. Because we wanted to preserve project naming and namespaces, I copied everything out into a new directory – the solution and the projects – and rebuilt the solution from scratch.</p>
<p>I would anticipate a project conversion process at some point, even one that was able to provide the basics (like moving package dependencies to project.json) and guidance on the remaining pieces (like why part of the project wasn’t able to convert, and how you might approach it). This post will walk through those steps of the conversion, but it will be done manually.</p>
<p>I wanted to maintain all the same names of the assemblies, namespaces and outputs, and the only way to currently do this is to clear out the src folder and start over. Don’t worry, our code is still good, we just have to wrangle it into new containers.</p>
<h2 id="Step_0_3A_Folder_Reorganization"><a href="#Step_0_3A_Folder_Reorganization" class="headerlink" title="Step 0: Folder Reorganization"></a>Step 0: Folder Reorganization</h2><p>One of the first changes that I made was a reorganization of the tooling that is used to support the build. Some of the build script relied on packages existing on disk (NUnit’s console runner, AliaSql) but this is an order-of-operations problem. When you grab the solution from the repo, you’re not actually able to build it until you restore the packages. Further, these assets are <strong>solution-level </strong>concerns, not project-level concerns, so which project do you install them into? NuGet does not have the concept of solution-level packages that apply to the solution itself, so while it works perfectly well for projects, NuGet is inherently not ideal for incorporating solution dependencies.</p>
<p>To remedy this, I have moved these types of assets into a tools folder and updated the build scripts accordingly. This approach is likely a matter of opinion more than anything, but the reality is that we want the directory structure to reflect which concerns <strong><u>are in</u></strong> the solution versus which concerns <strong><u>work on</u></strong> the solution.</p>
<p>I would like to note that there are still improvements to be made here – for instance, I know many teams actually have build scripts that are capable of not only restoring packages, but have the ability to go and grab NuGet itself – so expect some more changes as we continue to move through this migration. Automation is <em>awesome</em>.</p>
<h2 id="Step_1__u2013_Core"><a href="#Step_1__u2013_Core" class="headerlink" title="Step 1 – Core"></a>Step 1 – Core</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/08/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb.png" alt="image" title="image"></a>Our Core project was a breeze to port because it’s at the heart of the system in an <a href="/jeffreypalermo.com/blog/the-onion-architecture-part-1/">Onion Architecture</a> and takes on very few dependencies. I started the conversion by going through the motions of creating a new Core project, using the DLL project from the “Web Templates” part of the dialog.&nbsp; The first project also creates the solution, and the convention for the way the solutions are laid out on disk has changed.</p>
<p>So…the build broke.</p>
<p>Thankfully, this was easy to resolve with just a couple of quick fixes, but you’ll likely have to take similar steps on your project:</p>
<ul>
<li>First, update your paths to point at the correct location on disk</li>
<li>Second, comment out all the build steps that have to come later, like running unit or integration tests</li>
</ul>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/08/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb1.png" alt="image" title="image"></a>We can’t run unit tests quite yet (we need to convert those projects as well), but we can make sure that the project is building correctly.</p>
<p>We’re not modifying code at this point, so provided we can get the solution building we can have a good level of confidence – but not a guarantee – that our code is still in good shape. We want those tests back online before we merge this branch back to develop.</p>
<p>With the build running, I was able to jump back into Visual Studio and start adding back the code. In my case, nearly everything worked just by copying in the files from my backup location and pasting them into the project. It’s a bit tedious, but it’s by no means difficult or complicated.</p>
<p>The only package that I had to add at this point was a legacy dependency from NHibernate, namely the Iesi.Collections package. This is done by opening up the project.json for Core and updating the “dependencies” part of the project file. As soon as you save the file out, Visual Studio goes off and runs a background install of the packages that it finds you’ve put in there, along with any dependencies of those packages.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image2.png" alt="image" title="image"></p>
<p>Finding the right package and most recent version is quite easy in the project.json world. As you start typing a package name, in-line search kicks in and starts suggesting matches. Available versions of the packages are displayed, and VS indicates if those packages are available locally in a cache or found on a remote NuGet repository, indicated by the icon you see. All packages sources are queried for package information, so you can get packages and their version information from private repositories as well.</p>
<p>Once the packages were restored the solution built fine in Visual Studio 2015 and I was able to return to my console to run the build script.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image3.png" alt="image" title="image"></p>
<h2 id="Step_2_3A_Data_Access"><a href="#Step_2_3A_Data_Access" class="headerlink" title="Step 2: Data Access"></a>Step 2: Data Access</h2><p>Other than the fact that Data Access has a few more dependencies, it was really more of the same to get the Data Access project online and building through our script. I added another DLL to the solution, added the source files and installed the dependencies via project.json.</p>
<p>When I compiled the project at this point, some of the changes of the .NET Framework and the strategy of the team started to surface. For instance, typically you might find a reference to System.Data from your GAC in a project, however, in the new cross-platform project system and under the assumption that you may not have a GAC at all, the .NET folks have taken the mantra of “NuGet all the things.” To get access to the System.Data namespace and the IDataReader interface that was used in the DataAccess project, I had to add a reference to System.Data version 4.0.0 from NuGet (via project.json).</p>
<p>Other projects will have similar hits on moved packages. It is likely safe to use the GAC in situations where you know what the build environment looks like and are sure that build agents and other developers will have access to the required dependencies. But it is a more stable approach – and a better chance to successful compile our application – to instead reference those binaries from a package repository.</p>
<p>The other notable piece was in how we reference other projects in our own solution; today they look a lot like referencing other packages. Whether you go through the Add Reference dialog or if you prefer to edit the project file by hand, you’re going to also need to introduce a dependency on Core, which is done simply by adding the following line to the dependencies:</p>
<pre class="csharpcode"><span class="str">"Core"</span>: <span class="str">"1.0.0-*"</span></pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Excellent! Almost ready to build!</p>
<h2 id="Step_3_3A_Clean_Up"><a href="#Step_3_3A_Clean_Up" class="headerlink" title="Step 3: Clean Up"></a>Step 3: Clean Up</h2><p>Just a couple of other notes that I took and a couple of tips I’ve learned as I created these projects:</p>
<ul>
<li>You’ll have to set the default namespaces so that new classes that are introduced adhere to your conventions</li>
<li>You need to enable the “Produce outputs on build” in order for your project to build a NuGet package (this is in the build options)</li>
</ul>
<p>You’re also in charge of wiring up any dependencies your modules need where they aren’t satisfied with a single package for all output types. For instance, when I tried a small gamut of output targets I ran into this problem:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image4.png" alt="image" title="image"></p>
<p>The new .NET Platform (the base for Windows, web, mobile and x-plat) was not supported given the dependencies I have listed in my project, namely it is the IESI Collections that is the problem here. Ideally, you want to be able to support as many runtimes as possible, so you want to target the lowest common denominator. That is likely going to be “dotnet” going forward (which could in turn be used to build up applications for web, Windows or phone) but more realistically things like “net46”, which is just the 4.6 version of .NET, or “dnx46”, which is the new bits (think MVC Framework) running on top of .NET 4.6. In the cases where you don’t have a package that matches the target you need, you have a couple of choices, listed in order of easiest to most difficult:</p>
<ul>
<li>Contact the package authors to see if there is a new version coming</li>
<li>If it’s open source, contribute and get an output built for dotnet</li>
<li>Add runtime-specific dependencies to get the project building, then use compiler switches to implement different blocks of code based on the target framework</li>
<li>Switch off of that version of the package, or switch to an alternate package to get the same functionality and then update your code as required</li>
</ul>
<p>Sadly, that last one is likely the way we’re going to need to go, especially if we want to target x-plat development. This is not an easy task, but getting to this point in the migration is and only takes a couple of hours. If you haven’t done this sanity check in your project to identify packages that may cause issues during migrations, I would suggest that your assessment is not complete.</p>
<p>For the time being, we are concerned about supporting .NET 4.6 and DNX running on 4.6 for our project, so that is where I have left things. This is a reasonable compromise allowing continued development in web and Windows.</p>
<h2 id="Moving_On"><a href="#Moving_On" class="headerlink" title="Moving On"></a>Moving On</h2><p>The main tenets of our application are now alive and kicking in our Visual Studio 2015 solution with the new project system in place. In the next post in this series we’ll have a look at getting the tests online and updating the build script to execute our tests.</p>
<p>If you’d like to follow along with the progression as we get this fully converted you can check out <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/tree/refactor/move-to46-with-multitargetting" target="_blank" rel="external">the branch on GitHub</a>.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/08/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>To take advantage of multi-targeted outputs from our project – allowing our assemblies to be used from multiple frameworks across the org]]>
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/Code-Dive/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Launching An ASP.NET 5 Application from Visual Studio 2015]]></title>
    <link href="http://jameschambers.com/2015/07/launching-an-asp-net-5-application-from-visual-studio-2015/"/>
    <id>http://jameschambers.com/2015/07/launching-an-asp-net-5-application-from-visual-studio-2015/</id>
    <published>2015-07-29T19:00:00.000Z</published>
    <updated>2016-01-20T03:26:06.249Z</updated>
    <content type="html"><![CDATA[<p>If you are trying to use any DNX (DotNet Execution) runtime other than dnx451 (i.e. dnx452, dnx46) you will run into the following error when running the application from Visual Studio 2015, when used with the initial release of the Beta 6 tooling:</p>
<blockquote>
<p><strong>The current runtime target framework is not compatible with ‘YourWebApplication’.</strong></p>
<p>Current runtime Target Framework: ‘DNX,Version=v4.5.1 (dnx451)’<br> Type: CLR<br> Architecture: x64<br> Version: 1.0.0-beta6-12256</p>
</blockquote>
<p>If you’re instead running with a debugger attached, you won’t hit a breakpoint, you’ll only get a 500. It doesn’t matter what framework runtimes you have installed on your machine. It doesn’t matter what your global.json says or what dependencies or frameworks you take or specify in project.json.</p><p>This is because the default runtime for launching IIS Express from Visual Studio is indeed dnx451. You can get around this in one of two ways:</p>
<ol>
<li>Launch the website from the command line in your project directory using the command “dnx . web”. Web is a command that is exposed in your project.json and shares the needed info (config) to launch a project-specific instance of IIS.</li>
<li>In your project properties (right-click, properties from Solution Explorer), add the following environment variable in the Debug tab:<br>&nbsp;&nbsp;&nbsp;&nbsp; DNX_IIS_RUNTIME_FRAMEWORK = dnx46<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image25.png" alt="image" title="image"></p></li>
</ol>
<p>A huge thanks goes out to <a href="https://twitter.com/anurse" target="_blank" rel="external">Andrew Nurse</a> for providing a resolution on <a href="http://stackoverflow.com/questions/31671851/vs-2015-setting-right-target-framework-for-asp-net-5-web-project/31687529#31687529" target="_blank" rel="external">this matter</a> and responding to <a href="https://github.com/aspnet/dnx/issues/2367" target="_blank" rel="external">my issue</a> on GitHub.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are trying to use any DNX (DotNet Execution) runtime other than dnx451 (i.e. dnx452, dnx46) you will run into the following error ]]>
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="MVC" scheme="http://jameschambers.com/tags/MVC/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How Do You Measure Up? Find out in 60 Days!]]></title>
    <link href="http://jameschambers.com/2015/07/how-do-you-measure-up-find-out-in-60-days/"/>
    <id>http://jameschambers.com/2015/07/how-do-you-measure-up-find-out-in-60-days/</id>
    <published>2015-07-29T14:32:00.000Z</published>
    <updated>2016-01-20T03:26:06.004Z</updated>
    <content type="html"><![CDATA[<p>I am super geeked to be heading down to Austin, TX to speak at <a href="http://measureup.io/" target="_blank" rel="external">Measure Up</a> this coming September 26th. Measure Up 2015 is the inaugural skills and career development conference put on by the folks at <a href="http://clear-measure.com/" target="_blank" rel="external">Clear Measure</a>.</p>
<p><a href="http://measureup.io/" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image24.png" alt="image" title="image"></a></p>
<p>This conference is packed with all kinds of great speakers and covers a variety of topics related to business development, dev ops, personal growth and, of course, how to be mind-bendingly awesome at making software. I am going to be talking about the things you need to know when <a href="http://measureup2015.azurewebsites.net/mvc6/" target="_blank" rel="external">you’re moving to MVC 6</a>, and sharing about my experiences as <a href="http://measureup2015.azurewebsites.net/success-as-a-remote-worker/" target="_blank" rel="external">a remote worker</a>.</p>
<h2 id="If_You_Live_in_the_Austin_Area_u2026"><a href="#If_You_Live_in_the_Austin_Area_u2026" class="headerlink" title="If You Live in the Austin Area…"></a>If You Live in the Austin Area…</h2><p>…you have no excuses to miss this event. Register <em><u>today</u></em>, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank" rel="external">it’s only $10</a>, and dedicate one day this year to getting yourself closer to your dream career.</p>
<h2 id="If_You_Don_u2019t_Live_in_the_Austin_Area_u2026"><a href="#If_You_Don_u2019t_Live_in_the_Austin_Area_u2026" class="headerlink" title="If You Don’t Live in the Austin Area…"></a>If You Don’t Live in the Austin Area…</h2><p>…you should probably talk to your boss about getting down there for the day. It’s hard to find a conference with this kind of content and (essentially) only have to pay for a bit of travel, perhaps a hotel room. Professional development does not come with this value for this little.</p>
<h2 id="So_2C_What_Are_You_Waiting_For_3F"><a href="#So_2C_What_Are_You_Waiting_For_3F" class="headerlink" title="So, What Are You Waiting For?"></a>So, What Are You Waiting For?</h2><p><strong>Check out the conference agenda</strong>. Dev ops, docker. vNext, continuous deployment, load testing, microsevices, infrastructure as code <a href="http://measureup2015.azurewebsites.net/speakers/" target="_blank" rel="external">and more</a>. </p>
<p><strong>Register for the event</strong>. Seriously, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank" rel="external">ten bucks</a><em>. </em></p>
<p>See you in September! ‘Til then, happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile6.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am super geeked to be heading down to Austin, TX to speak at <a href="http://measureup.io/" target="_blank" rel="external">Measure Up</]]>
    </summary>
    
      <category term="MeasureUp" scheme="http://jameschambers.com/tags/MeasureUp/"/>
    
      <category term="Conferences" scheme="http://jameschambers.com/categories/Conferences/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ASP.NET 5 Beta 6 Is In The Wild]]></title>
    <link href="http://jameschambers.com/2015/07/asp-net-5-beta-6-is-in-the-wild/"/>
    <id>http://jameschambers.com/2015/07/asp-net-5-beta-6-is-in-the-wild/</id>
    <published>2015-07-28T19:52:38.000Z</published>
    <updated>2016-01-20T03:26:04.069Z</updated>
    <content type="html"><![CDATA[<p>The Beta 6 release of ASP.NET 5 is now available. Run the following command to upgrade from a previous version:</p>
<pre class="csharpcode">dnvm upgrade</pre>

<p><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style>After that, a “dnvm list” command will give you the following:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image22.png" alt="image" title="image"></p>
<p>You can also upgrade dnvm itself with the following command:</p>
<p><pre class="csharpcode">dnvm update-self</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style>Which will get you up to the beta 7 version (build 10400) of DNVM.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image23.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb6.png" alt="image" title="image"></a></p>
<p>You’ll also need the updated VS 2015 tooling, which is available here (along with the DNVM update tools if you want them seperately): <a href="http://www.microsoft.com/en-us/download/details.aspx?id=48222" target="_blank" rel="external">Microsoft Visual Studio 2015 Beta 6 Tooling Download</a>.</p>
<h2 id="Why_This_is_Important"><a href="#Why_This_is_Important" class="headerlink" title="Why This is Important"></a>Why This is Important</h2><p>As part of my progression in porting an MVC 5 app to MVC 6, one scenario that I needed support for was to have libraries targeting .NET 4.6 reference-able from a DNX project. MVC 6, up to this point, only supported 4.5.1, which meant that you’d have to roll back your targeting if you were on 4.5.2 or 4.6. </p>
<p>Of course, multi-targeting is a better option, but requires the time and capacity to either slave over the old code base and NuGet packaging nuances, or port to the new project format where you have much greater in-project support for targeting multiple frameworks.</p>
<h2 id="What_You_Get"><a href="#What_You_Get" class="headerlink" title="What You Get"></a>What You Get</h2><p>As previously detailed by <a href="https://twitter.com/DamianEdwards" target="_blank" rel="external">Damien Edwards</a>, there are bug fixes, features and improvements in the following areas: <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A1.0.0-beta6" target="_blank" rel="external">Runtime</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A6.0.0-beta6" target="_blank" rel="external">MVC</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A4.0.0-beta6" target="_blank" rel="external">Razor</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A3.0.0-beta6" target="_blank" rel="external">Identity</a>. In addition to supporting .NET 4.6 in DNX, they have also added localization and have been working on other things like distributed caching, which you can <a href="https://github.com/aspnet/Announcements/issues/43" target="_blank" rel="external">read about here</a>.</p>
<h2 id="What_To_Watch_Out_For"><a href="#What_To_Watch_Out_For" class="headerlink" title="What To Watch Out For"></a>What To Watch Out For</h2><p>This is still a beta, and there are many moving parts.</p>
<p>Be sure to check out the <a href="https://live.asp.net/" target="_blank" rel="external">community standup today</a> and head over to <a href="https://github.com/aspnet/" target="_blank" rel="external">GitHub</a> for the announcements on <a href="https://github.com/aspnet/Announcements/issues" target="_blank" rel="external">breaking changes</a>.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile4.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The Beta 6 release of ASP.NET 5 is now available. Run the following command to upgrade from a previous version:</p>
<pre class="csharpcod]]>
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="Develop Meta" scheme="http://jameschambers.com/categories/Develop-Meta/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Upgrading Projects to .NET 4.6]]></title>
    <link href="http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/"/>
    <id>http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/</id>
    <published>2015-07-27T20:07:33.000Z</published>
    <updated>2016-01-20T03:26:07.571Z</updated>
    <content type="html"><![CDATA[<p>The updates in the .NET Framework provide many improvements, including support for new language features in c#, garbage collection, enhancements in cryptography support, feature toggles, new classes in the BCL and others. The RyuJIT compiler adds significant performance gains for 64bit applications, even those not originally targeting the 4.6, improves startup times and can reduce the memory footprint of your application.</p>
<p><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"><em>intro page</em></a><em>.</em></p>
<p>While the explicit modification of your projects may not be required to gain some of the 4.6 benefits, there may be other organizational factors that lead you down that path. We’ll work through the mechanics of the upgrade to 4.6 in this post.</p>
<h2 id="A_Word_of_Caution"><a href="#A_Word_of_Caution" class="headerlink" title="A Word of Caution"></a>A Word of Caution</h2><p>UPDATE: July 28, 2015 There is a known issue with certain 64bit applications running on .NET 4.6, under certain circumstances, with certain parameter types and sizes. You can read more <a href="http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/" target="_blank" rel="external">about the bug finding here</a> and the issue is being <a href="https://github.com/dotnet/coreclr/issues/1296" target="_blank" rel="external">tracked on GitHub</a>, followed by Microsoft’s <a href="http://blogs.msdn.com/b/dotnet/archive/2015/07/28/ryujit-bug-advisory-in-the-net-framework-4-6.aspx" target="_blank" rel="external">response and recommendation</a>. </p>
<p>For this reason <strong>I am not recommending an upgrade to 4.6</strong> unless you understand the implications and how to properly vet the scenarios described in your environment.</p>
<h2 id="Getting_Your_Projects_Up-to-date"><a href="#Getting_Your_Projects_Up-to-date" class="headerlink" title="Getting Your Projects Up-to-date"></a>Getting Your Projects Up-to-date</h2><p>Every project we create references a specific version of the .NET Framework. This has been true throughout the history of .NET, and though the way we will do it in the future will change with the new project system, the premise remains the same. </p>
<p>For now, you can simply open the properties tab for your project and change the target Framework.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image18.png" alt="image" title="image"></p>
<p>You will be prompted to let you know that some changes may be required.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image19.png" alt="image" title="image"></p>
<p>Note that in my case, I had 7 projects with varying types of references and dependencies, and no modifications were required to the code. Your mileage may vary, of course, but this is a simple change and one that you can test quickly. With proper source control in place, this is a zero-risk test that should take only a moment or two.</p>
<p>Now, if you were to try to build the Bootcamp project when you’re only partway through the upgrade, you’d see something similar to the following:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image20.png" alt="image" title="image"></p>
<p>With a message that reads:</p>
<blockquote>
<p>The primary reference “x” could not be resolved because it was built against the “.NETFramework,Version=v4.6” framework. The is a higher version than the currently targeted framework “.NETFramework,Version=4.5.1”.</p>
</blockquote>
<p>You may run into this in other scenarios, as well, especially if you you have references to packages or libraries that get out of sync in your upgrade process. <strong>A project that takes on dependencies must be at (or higher than) the target framework of the compiled dependencies</strong>. To remedy this, we simply need to complete the upgrade process on the rest of the projects.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image21.png" alt="image" title="image"></p>
<p>This was pretty painless. <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile5.png" alt="Smile"></p>
<h2 id="Reasons_to_Upgrade_3F"><a href="#Reasons_to_Upgrade_3F" class="headerlink" title="Reasons to Upgrade?"></a>Reasons to Upgrade?</h2><p>Moving from 4.5.x to 4.6 is not a required step in our conversion to an MVC 6 project. In fact, MVC 6 indeed runs on a different framework altogether. To that end, any environment where you have 4.6 installed will “pull up” other assemblies because it is a drop-in replacement for pervious versions. </p>
<p>Perhaps your primary motivator to move to 4.6 is the perf bump in the runtime, or it might be the new language features (which only require a framework install, not a version bump in your target). But it also ensures we’re compatible with other projects in our organization, particularly when we consider the default target for new projects in VS 2015 is against 4.6. If we want to leverage these from other projects in our organization, we want to make sure that we’re not the lowest common denominator in the mix.</p>
<h2 id="The_Next_Step"><a href="#The_Next_Step" class="headerlink" title="The Next Step"></a>The Next Step</h2><p>However, there are a couple of other points that we should note, namely that our compiler isn’t tied to the installed framework or the runtime, it’s just used to <em>target</em> a specific set of instructions that the runtime can digest. So, if our MVC 6 will be running on DNX46, or we have other .NET 4.6 projects we’re all set (though, we’d have to use DNU wrap to consume our library at this point in DNX).</p>
<p>But what if we have different projects across our organization, or we have external teams using our libraries? The answer lies in multi-targeting, which is what we’ll address in the next post in this series.</p>
<p>Until then, happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile5.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The updates in the .NET Framework provide many improvements, including support for new language features in c#, garbage collection, enhan]]>
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Your Build Server Ready for VS 2015]]></title>
    <link href="http://jameschambers.com/2015/07/getting-your-build-server-ready-for-vs-2015/"/>
    <id>http://jameschambers.com/2015/07/getting-your-build-server-ready-for-vs-2015/</id>
    <published>2015-07-25T03:33:57.000Z</published>
    <updated>2016-01-20T03:26:05.909Z</updated>
    <content type="html"><![CDATA[<p>If you’re modernizing your project, one of the things you’ll surely want to do is to make sure that your build server is upgraded to support VS 2015. Regardless of what CI engine you’re using, there will be at least a little bit of effort required to get your project building again.</p>
<p><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"><em>intro page</em></a><em>.</em></p>
<p>For the purpose of this exercise, we’re using TeamCity to run our builds based on a VSC checkin. We’ll get TeamCity prepped to run our build and then update our repository so that we show our build status indicator on the readme home page.</p>
<h2 id="The_TL_3BDR_Details"><a href="#The_TL_3BDR_Details" class="headerlink" title="The TL;DR Details"></a>The TL;DR Details</h2><p>Here’s the basics of what was required to get the builds back online:</p>
<ul>
<li>Backup and upgrade TeamCity</li>
<li>Allow the agents to upgrade, or upgrade them manually</li>
<li>Install .NET 4.6 and the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159" target="_blank" rel="external">VS 2015 tools</a></li>
<li>Ensure that build targets live on your build agents</li>
<li>Run your build</li>
</ul>
<h2 id="Upgrading_the_Server"><a href="#Upgrading_the_Server" class="headerlink" title="Upgrading the Server"></a>Upgrading the Server</h2><p>I engaged my teammate <a href="http://www.clear-measure.com/our-team/" target="_blank" rel="external">James Allen</a> here to help with some best practices, namely getting the server backed up. You can either back up the TeamCity data from the web interface or one of the other <a href="https://confluence.jetbrains.com/display/TCD9/TeamCity+Data+Backup" target="_blank" rel="external">recommended approaches</a>, or you could snapshot your server for a reset should one be required. During this process, it’s a good idea to spin down your build agents so that you’re not wrecking anyone’s builds.</p>
<p>Next, we needed to move to version 9.1 of TeamCity, so we ran the <a href="https://confluence.jetbrains.com/display/TCD9/Upgrade" target="_blank" rel="external">upgrade process</a> via the web site. This is a painless task and takes only a fraction of the time it took to back up the data. Failing any troubles (we saw none), your build server should be back online in no time, and the build agents were notified (and complied!) to update themselves as well.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image13.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb5.png" alt="image" title="image"></a>Next, I downloaded and installed the .NET 4.6 installer and the VS 2015 tooling, which can be found on the <a href="https://www.visualstudio.com/downloads/download-visual-studio-vs" target="_blank" rel="external">VS 2015 download page</a>. You’ll need to explore through the available downloads on the page, as you can see on this screenshot, to grab the relevant files. </p>
<p>These installs will need to be run on every build agent.</p>
<p>One thing to note was that my original attempt to get the build running failed because of missing build targets at an expected location. I ended up having to copy files from my local machine, where Visual Studio 2015 is installed, from the path: C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0 on the build server.</p>
<p>UPDATE: With the availability of the MS Build Tools for Visual Studio 2015 you no longer have to manually zip up and copy the files. You can download the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159" target="_blank" rel="external">MS Build Tools 2015 here</a>.</p>
<h2 id="Verifying_the_Install"><a href="#Verifying_the_Install" class="headerlink" title="Verifying the Install"></a>Verifying the Install</h2><p>You’ll know the tools have been installed correctly if you return to the build configuration settings and add a new build step for msbuild (you don’t have to save it). You’ll see that you’ll have the new options in place:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image14.png" alt="image" title="image"></p>
<p>The build server should be good to go now! For us, we’re not using an MSBuild build runner, our application is build with a PowerShell script via a batch file. This allows our build to be executed locally with only a small parameter change, and the CI process is entirely encapsulated in code (and under source control).</p>
<p>Provided your project is pointing at the repository, you’ll have a good shot at running the build at this point. For our project, everything worked as expected.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image15.png" alt="image" title="image"></p>
<h2 id="Showing_Some_Bling"><a href="#Showing_Some_Bling" class="headerlink" title="Showing Some Bling"></a>Showing Some Bling</h2><p>Now it’s time to beef up our repo, at least a little. What I’m talking about is wearing our CI on our sleeve, letting everyone on the team (or other watchers of the repository) that our builds are healthy or, perhaps, needing some love; let’s display the build status indicator on our readme, like this:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image16.png" alt="image" title="image"></p>
<p>First, drill into the build configuration and locate the advanced options under “General Settings”. You need to enable the status widget. </p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image17.png" alt="image" title="image"></p>
<p>Also, from this screen, take note of your Build Configuration ID. This is important because you’ll need to include it in the server request to generate the badge.</p>
<p>Finally, include the following markdown, which is essentially a formatted link with an image inside of it:</p>
<pre class="csharpcode">Current Build Status [![](http://YOUR_SERVER/app/rest/builds/buildType:(id:YOUR_BUILD_CONFIGURATION_ID)/statusIcon)](http://teamcity/viewType.html?buildTypeId=btN&amp;guest=1)</pre>

<p><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style>Be sure to replace the obvious placeholder tokens with your own information.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>With our build server updated and our builds back online, it’s time to start shifting our targets. In the next post, we’re going to update our projects and recover from any errors/challenges we may discover along the way.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile3.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you’re modernizing your project, one of the things you’ll surely want to do is to make sure that your build server is upgraded to supp]]>
    </summary>
    
      <category term="MVC5" scheme="http://jameschambers.com/tags/MVC5/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Moving to VS 2015 from VS 2013]]></title>
    <link href="http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/"/>
    <id>http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/</id>
    <published>2015-07-24T01:45:48.000Z</published>
    <updated>2016-01-20T03:26:06.399Z</updated>
    <content type="html"><![CDATA[<p>The folks on the Visual Studio team have been making it increasingly easier to move from version-to-version with less impact on our projects. In this post I’m going to examine the process of moving from Visual Studio 2013 to Visual Studio 2015.</p>
<p><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"><em>intro page</em></a><em>.</em></p>
<h2 id="The_Backstory"><a href="#The_Backstory" class="headerlink" title="The Backstory"></a>The Backstory</h2><p>First, a bit about our application. I said this was a real-world application, and it is. You can <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank" rel="external">clone the repo</a> and run it locally if you like.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image10.png" alt="image" title="image"></p>
<p>What we have is an expense report application, albeit a little on the light side for features. No worries, though, that is the intent! But the real pieces of an application sporting <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/" target="_blank" rel="external">Onion Architecture</a> are in place, and there’s quite a bit of commonly-used tech in this bad boy that you would likely find in any real-world app:</p>
<ul>
<li><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image11.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb4.png" alt="image" title="image"></a>Separate projects for separate concerns</li>
<li>A UI Project that stands with only a single reference (to Core)</li>
<li>An older version of NHibernate</li>
<li>Unit tests</li>
<li>HTTP Handlers</li>
<li>The Bootstrap CSS/JS library</li>
<li>StructureMap for dependency injection</li>
<li>A database migrations library</li>
<li>A custom workflow engine</li>
</ul>
<p>So, this is no File –&gt; New –&gt; Project here, this is the real deal.</p>
<h2 id="First_Steps"><a href="#First_Steps" class="headerlink" title="First Steps"></a>First Steps</h2><p>The first issue we’re going to address is the fact that our solution and project are currently in VS 2013 “mode”.&nbsp; In the past, you’d likely have to walk through some kind of conversion process and this was usually a compelling enough reason for people to back delay an upgrade. Did you ever have issues with incorrect file paths, incompatible project type identifiers, broken project references and builds broken due to missing dependencies? At times, I’ve even had to resort to manually editing the solution and project files to get a project back online.&nbsp; <strong>Thankfully, this is nothing like that</strong>. There is nothing major we need to do in order to get our project open in Visual Studio 2015, just load the solution from disk.</p>
<p>In the case of Bootcamp, our project opens cleanly and builds as we would expect. But you’ll notice right away a change in the repo.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image12.png" alt="image" title="image"></p>
<p>Visual Studio 2015 runs IIS Express in a more specific context than previous versions, which is a huge win. The applicationhost.config is basically everything you need to get the web server up locally while you develop, debug and test, and it replaces what we would used to use for IIS Express for machine-wide configuration.</p>
<p>This file also happens to be in the .vs directory, used only for devs running Visual Studio on Windows. It’s also easily regenerated for other developers and we don’t need to check it into source control, lest we be endlessly trumping each others’ local changes. Instead of any project or solution modifications, we’re instead going to modify the .gitignore file, adding the following line:</p>
<pre class="csharpcode">**/src/.vs/</pre>

<p>Great stuff! Easy, and we’re running in the latest version of everyone’s favorite IDE. We haven’t yet made any project structure changes, haven’t targeted any new .NET bits, but now we’re ready to start those pieces.</p>
<p>The pull request for this post can be <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/pull/10" target="_blank" rel="external">reviewed here</a>.</p>
<p><strong><font style="background-color: rgb(204, 204, 204);">&nbsp; Pro tip&nbsp; </font></strong> To get your solution to open in Visual Studio 2015 by default, instead of Visual Studio 2013, you can simply update the first few lines of your .sln file to include the following:<br> <font face="Lucida Console"># Visual Studio 14</font></p>
<p>VisualStudioVersion = 14.0.23107.0</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>I’ve been running different incarnations of VS 2015 on my machine alongside Visual Studio 2013 (and for a period, VS 2010 as well) without any gotchas. There are some great new features that are worth checking out (it’s <a href="https://www.visualstudio.com/en-us/news/vs2015-vs.aspx" target="_blank" rel="external">a long list</a>), and your team may be able to leverage them.</p>
<p>While this is a short and single-focused post, I hope you see that opening the project in VS 2015 may yield no negative side effects. Heck, if you’re not sure you want to try it on your metal, you can even jump on a free trial of Azure and attempt to open your project on a VM running 2015.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile2.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The folks on the Visual Studio team have been making it increasingly easier to move from version-to-version with less impact on our proje]]>
    </summary>
    
      <category term="ClearMeasure" scheme="http://jameschambers.com/tags/ClearMeasure/"/>
    
      <category term="MVC5" scheme="http://jameschambers.com/tags/MVC5/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Upgrading a Real-World MVC 5 Application to MVC 6]]></title>
    <link href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"/>
    <id>http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/</id>
    <published>2015-07-24T00:19:13.000Z</published>
    <updated>2016-01-20T03:26:07.518Z</updated>
    <content type="html"><![CDATA[<p>These are exciting times for web development on the Microsoft stack, but perhaps a little confusing as well. For many years the cycle of moving from one solution and project system to the next hasn’t been overly complex. Sure, there have been breaking changes, I’ve felt those pains myself, but provided the framework you were using continued to live on, there was a reasonable migration path.</p>
<p>Moving to MVC 6 is going to be a big shift for a lot of development teams, but that doesn’t mean it needs to be scary, complicated or introduce instability into your project.</p>
<p>It does, however, mean that you’re going to need an attitude of learning, that you’ll pick up some new tooling, you’ll have to brush up on your JavaScript and work with some new concepts.</p>
<h2 id="Let_u2019s_Make_it_Happen"><a href="#Let_u2019s_Make_it_Happen" class="headerlink" title="Let’s Make it Happen"></a>Let’s Make it Happen</h2><p>I’m super excited to now be part of the excellent crew at <a href="http://clear-measure.com/" target="_blank" rel="external">Clear Measure</a>, where this type of attitude seems to be fostered, encouraged and embodied by other members of the team and, more importantly, the management.</p>
<p>We’re now undertaking the process of converting from MVC5 =&gt; MVC6 with our <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank" rel="external">Bootcamp workshop project</a> and I have the privilege of blogging my experience with it as I go. <a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image7.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb2.png" alt="image" title="image"></a>We’re going to keep the project building and operable as we go, such that at an point it can be shipped to production or branched for feature development.&nbsp; We’ll be using GitFlow, feature branches, continuous integration and continuous deployment.&nbsp; Our check-ins will be code that builds cleanly with passing tests.</p>
<p><strong>And,</strong> for those of you who come join in our our MVC Masters Bootcamp sessions, you’ll also get to work on this code base with all the tools, exposure to pair programming, a dedicated product owner and 3 days of intense coding.</p>
<p><a href="http://clear-measure.com/" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image8.png" alt="image" title="image"></a><strong>Shameless plug</strong>: If you want to level up your team of developers, please reach out to <a href="mailto:gina@clear-measure.com??Subject=MVC%20Masters%20Bootcamp" target="_blank" rel="external">Gina Hollis</a> at Clear Measure to plan an on- or off-site event. We promise to melt your minds.</p>
<h2 id="How_We_u2019re_Getting_There"><a href="#How_We_u2019re_Getting_There" class="headerlink" title="How We’re Getting There"></a>How We’re Getting There</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image9.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb3.png" alt="image" title="image"></a>Well, to start it off, we’re beginning with our initial commit as the MVC 5 project <a href="https://twitter.com/jeffreypalermo" target="_blank" rel="external">Jeffrey Palermo’s</a> been using in the Masters Bootcamp for some time.</p>
<p>The application is hosted on <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank" rel="external">GitHub</a> and you can <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/issues/" target="_blank" rel="external">see the issues</a> that we’re identifying and working through. We’re doing the whole thing as open source in hopes that other teams can learn from what we learn in the process.</p>
<p>And, as I knock items off the issue list I’ll be posting about them here, covering the challenges, pitfalls and wins we encounter along the way. You can bookmark this post for updates in the project. Feel free to ask questions on the issues in the repository, or ping me on Twitter (<a href="https://twitter.com/CanadianJames/" target="_blank" rel="external">@CanadianJames</a>).</p>
<p>Stay tuned!</p>
<ul>
<li>Part 1: <a href="http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/">Moving to VS2015 from VS2013</a></li>
<li>Part 2: <a href="http://jameschambers.com/2015/07/getting-your-build-server-ready-for-vs-2015/">Getting Your Build Server Ready for VS2015</a></li>
<li>Part 3: <a href="http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/">Retargeting Projects to .NET 4.6</a></li>
<li>Part 4: <a href="http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/">Multitargeting Projects with VS2015 Projects</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>These are exciting times for web development on the Microsoft stack, but perhaps a little confusing as well. For many years the cycle of ]]>
    </summary>
    
      <category term="ClearMeasure" scheme="http://jameschambers.com/tags/ClearMeasure/"/>
    
      <category term="MVC5" scheme="http://jameschambers.com/tags/MVC5/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Workaround: NuGet Packages Failing to Download in Visual Studio 2015 RTM]]></title>
    <link href="http://jameschambers.com/2015/07/workaround-nuget-packages-failing-to-download-in-visual-studio-2015-rtm/"/>
    <id>http://jameschambers.com/2015/07/workaround-nuget-packages-failing-to-download-in-visual-studio-2015-rtm/</id>
    <published>2015-07-23T19:59:39.000Z</published>
    <updated>2016-01-20T03:26:07.925Z</updated>
    <content type="html"><![CDATA[<p>I haven’t figured out a common theme yet, but certain packages are failing to restore when you attempt to install them from the NuGet primary feed via the project.json file in Visual Studio 2015. Thanks to <a href="https://twitter.com/BrockLAllen" target="_blank" rel="external">Brock Allen</a> for confirming I wasn’t going insane.</p>
<p>A couple of things I’ve discovered:</p>
<ul>
<li>This seems to be more common for prerelease packages</li>
<li>It seems to work if the package has a previous release version (not in pre)</li>
</ul>
<p>As a workaround, you can add the packages manually via the dialog in Visual Studio, just make sure you hit that pre-release flag:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image3.png" alt="image" title="image"></p>
<p>If that doesn’t work for you – sometimes I’m not seeing the package above in my feed – if you have it you can add another NuGet feed to an alternate package source, like I’ve done here with AutoFac’s nightly build feed:</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/image4.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image_thumb1.png" alt="image" title="image"></a></p>
<p>The other thing is that once you get it installed in your system cache, it will resolve it from there, which I imagine makes it harder to triage for anyone trying to figure out what’s going on.</p>
<p>I’m seeing various confirmations of this on Twitter:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image5.png" alt="image" title="image"></p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image6.png" alt="image" title="image"></p>
<p>With NuGet 3 being release (and part of VS 2015) I think some package authors are unsure if it’s their problem or what the case may be. Depending on the method you come at it, it’s possible that you can still get the package, but I would say it seems unpredictable right now.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I haven’t figured out a common theme yet, but certain packages are failing to restore when you attempt to install them from the NuGet pri]]>
    </summary>
    
      <category term="Uncategorized" scheme="http://jameschambers.com/categories/Uncategorized/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Response from Postsharp.net is not a Valid Nuget v2 Service Response]]></title>
    <link href="http://jameschambers.com/2015/07/response-from-postsharp-net-is-not-a-valid-nuget-v2-service-response/"/>
    <id>http://jameschambers.com/2015/07/response-from-postsharp-net-is-not-a-valid-nuget-v2-service-response/</id>
    <published>2015-07-22T07:05:22.000Z</published>
    <updated>2016-01-20T03:26:06.952Z</updated>
    <content type="html"><![CDATA[<p>After installing PostSharp.net on my machine for a project (I did the MSI install) I started getting errors during the package restore that ended up blocking my builds. They looked a lot like this:</p>
<blockquote>
<p>Error: FindPackagesById: EntityFramework.Core Response from <a href="https://www.postsharp.net/nuget/packages/FindPackagesById(" target="_blank" rel="external">https://www.postsharp.net/nuget/packages/FindPackagesById()?id=’EntityFramework.Core’</a>?id=) is not a valid NuGet v2 service response.</p>
</blockquote>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image1.png" alt="image" title="image"></p>
<p>Now, an important note here: I’m on a machine that’s seen various updates and changes to VS 2015, and this was a version of PostSharp that wasn’t originally built for the RTM version of Visual Studio. So…this may be entirely circumstantial, but it’s what I ran into.</p>
<p>And it wasn’t just on that one package (others would give the same result) and it wasn’t just on one project. I tried to isolate this, but couldn’t find the source. Why was PostSharp getting in the way of my package restore? Even using DNU from the command line, <strong><em>after</em></strong> I explicitly uninstalled it? I started setting compiler variables to block PostSharp on those projects, but that got frustrating quickly, so I resorted to uninstalling everything I could find of it.</p>
<p>After the uninstall, I still was stumped, same errors all over again. With the help of my friend <a href="https://twitter.com/dbelcham" target="_blank" rel="external">Donald Belcham</a>, I was able to find traces of PostSharp still on my machine, located in the system-wide NuGet package source feed configuration:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image2.png" alt="image" title="image"></p>
<p>Unchecking that box above does the trick.</p>
<p>Might be an edge case if you run into this, but if you do, and this helps, consider buying Don a scotch! </p>
<p>Happy coding. <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>After installing PostSharp.net on my machine for a project (I did the MSI install) I started getting errors during the package restore th]]>
    </summary>
    
      <category term="NuGet" scheme="http://jameschambers.com/tags/NuGet/"/>
    
      <category term="PostSharp" scheme="http://jameschambers.com/tags/PostSharp/"/>
    
      <category term="compiling" scheme="http://jameschambers.com/tags/compiling/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Day 3 – Extracting a Service to Interact with Azure Table Storage]]></title>
    <link href="http://jameschambers.com/2015/07/day-3-extracting-a-service-to-interact-with-azure-table-storage/"/>
    <id>http://jameschambers.com/2015/07/day-3-extracting-a-service-to-interact-with-azure-table-storage/</id>
    <published>2015-07-18T19:32:58.000Z</published>
    <updated>2016-01-20T03:26:05.479Z</updated>
    <content type="html"><![CDATA[<p><em>In <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/">this series</a> we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 Application, using the Visual Studio 2013 IDE and Microsoft Azure infrastructure.</em></p>
<p>Our controllers are not supposed to be about anything more than getting models together so that our views have something to present. When we start mixing concerns, our application starts to become very difficult to test, controllers start getting quite complex and the difficulty in maintaining our application can skyrocket. </p>
<p>Let’s avoid that.</p>
<p>If you want to follow along, please <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank" rel="external">pop into Azure</a> and make sure you’ve got an account ready to go. The trial is free, so get at it!</p>
<h2 id="Defining_Our_Service"><a href="#Defining_Our_Service" class="headerlink" title="Defining Our Service"></a>Defining Our Service</h2><p>Let’s look at the operations we’re going to need, from what we’ve already implemented, and knowing what we’re planning from <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/">our outline</a>:</p>
<ul>
<li>Insert a record  </li><li>Get a filtered set of records  </li><li>Update a record  </li><li>Deleting a record </li>
</ul>
<p>Cool beans. At first blush it seems like we’ve got a pretty simple set of concerns, but notice that I didn’t include things like “connecting to Azure”, “creating table references” or “reading configuration information”, as those are all separate concerns that our controller doesn’t actually care about.&nbsp; Remember, we’re trying to isolate our concerns. </p>
<p>Hrm…so, manipulating records, adding, deleting, filtering, separating concerns from our business logic…this is starting to sound familiar, right?&nbsp; </p>
<blockquote>
<p>Use a <strong>repository</strong> to separate the logic that retrieves the data and maps it to the entity model from the business logic that acts on the model. The business logic should be agnostic to the type of data that comprises the data source layer. Source: <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx" target="_blank" rel="external">MSDN</a>. </p>
</blockquote>
<p>So, we’re going to want to build something using the repository pattern. We’ll use that repository here in our application’s controllers, but in a larger project you might go even further to have an application services layer where you map between the domain models and the view models that we have in our views. All in, our interface might look like the following:</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> ITableStorageRepository&lt;T&gt; <span class="kwrd">where</span> T : TableEntity<br>{<br>    <span class="kwrd">void</span> Insert(T entity);<br>    <span class="kwrd">void</span> Update(T entity);<br>    <span class="kwrd">void</span> Delete(T entity);<br>    IEnumerable&lt;T&gt; GetByPartition(<span class="kwrd">string</span> partitionKey);<br>}</pre></p>
<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The public interface simply gives us a way to do our CRUD operations and treat a filtered result set <a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank" rel="external">as a collection</a> in order to minimize duplicate constructs and operations related to table queries. You can think of the CloudTableClient and TableQueries from the Azure SDK as part of a <a href="http://martinfowler.com/eaaCatalog/dataMapper.html" target="_blank" rel="external">Data Mapper</a> layer that enables us to build this abstraction.</p>
<p>Note: For the purpose of illustration, I’m going to continue to use TableEntity here, which doesn’t completely abstract the Azure Table Storage concern away from my controller. I understand that; in a real-world scenario, I would typically have a view model that is used in the MVC application and an intermediary service would handle mapping as required.</p>
<h2 id="Implementing_the_Service"><a href="#Implementing_the_Service" class="headerlink" title="Implementing the Service"></a>Implementing the Service</h2><p>Leveraging this is going to be awesome, but we need to move some of the heavy-lifting out of our controller first.&nbsp; Let’s start by creating a Repositories folder and adding a class called KittehRepository, which will of course implement ITableStorageRepository&lt;KittehEntity&gt;.</p>
<p><strong>Don’t peak!</strong> As an exercise for the reader, you can use the interface noted above to implement the class. Use the interface above to craft your KittehRepository class. You should be able to find all the bits you need by exploring the objects already in use in the controller.</p>
<p>When you’re ready, here’s my version of the solution below:</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> KittehRepository : ITableStorageRepository&lt;KittehEntity&gt;<br>{<br>    <span class="kwrd">private</span> <span class="kwrd">readonly</span> CloudTableClient _client;</pre></p>
<pre><code>&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; KittehRepository()
{
    var storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(&lt;span class=&quot;str&quot;&gt;&quot;StorageConnectionString&quot;&lt;/span&gt;));
    _client = storageAccount.CreateCloudTableClient();
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Insert(KittehEntity entity)
{
    var kittehTable = _client.GetTableReference(&lt;span class=&quot;str&quot;&gt;&quot;PicturesOfKittehs&quot;&lt;/span&gt;);
    var insert = TableOperation.Insert(entity);
    kittehTable.Execute(insert);
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Update(KittehEntity entity)
{
    var kittehTable = _client.GetTableReference(&lt;span class=&quot;str&quot;&gt;&quot;PicturesOfKittehs&quot;&lt;/span&gt;);
    var insert = TableOperation.Replace(entity);
    kittehTable.Execute(insert);
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Delete(KittehEntity entity)
{
    var kittehTable = _client.GetTableReference(&lt;span class=&quot;str&quot;&gt;&quot;PicturesOfKittehs&quot;&lt;/span&gt;);
    var insert = TableOperation.Delete(entity);
    kittehTable.Execute(insert);
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;KittehEntity&amp;gt; GetByPartition(&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; partitionKey)
{
    var kittehTable = _client.GetTableReference(&lt;span class=&quot;str&quot;&gt;&quot;PicturesOfKittehs&quot;&lt;/span&gt;);
    var kittehQuery = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; TableQuery&amp;lt;KittehEntity&amp;gt;()
                    .Where(TableQuery.GenerateFilterCondition(&lt;span class=&quot;str&quot;&gt;&quot;PartitionKey&quot;&lt;/span&gt;, QueryComparisons.Equal, partitionKey));
    var kittehs = kittehTable.ExecuteQuery(kittehQuery).ToList();

    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; kittehs;
}
</code></pre><p>}<style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>One thing to note is that I’ve pushed <em>most</em> of the initialization up to the constructor, and I’ve not implemented any kind of seeding code. The table seeding that I illustrated in <a href="http://jameschambers.com/2015/01/day-1-the-basics-of-the-basics-with-azure-table-storage/">Day 1</a> is a concern that should be implemented outside of a repository, likely as part of a process that starts up the application in first-run scenarios, or something that would be run as part of a deployment to a test/QA environment.</p>
<h2 id="Cleaning_up_Our_Controller"><a href="#Cleaning_up_Our_Controller" class="headerlink" title="Cleaning up Our Controller"></a>Cleaning up Our Controller</h2><p>I love this. The controller can now do what we need it to do. Here’s the complete class, with an added constructor that accepts a reference to the repository (we’ll wire that up shortly):</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller<br>{<br>    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ITableStorageRepository&lt;KittehEntity&gt; _kittehRepository;</pre></p>
<pre><code>&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; HomeController(ITableStorageRepository&amp;lt;KittehEntity&amp;gt; kittehRepository)
{
    _kittehRepository = kittehRepository;
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ActionResult Index()
{
    var kittehs = _kittehRepository.GetByPartition(&lt;span class=&quot;str&quot;&gt;&quot;FunnyKittehs&quot;&lt;/span&gt;);
    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; View(kittehs);
}

[HttpPost]
&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ActionResult Index(KittehEntity entity)
{
    _kittehRepository.Insert(entity);
    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; RedirectToAction(&lt;span class=&quot;str&quot;&gt;&quot;Index&quot;&lt;/span&gt;);
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ActionResult About()
{
    ViewBag.Message = &lt;span class=&quot;str&quot;&gt;&quot;Your application description page.&quot;&lt;/span&gt;;

    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; View();
}

&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; ActionResult Contact()
{
    ViewBag.Message = &lt;span class=&quot;str&quot;&gt;&quot;Your contact page.&quot;&lt;/span&gt;;

    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; View();
}
</code></pre><p>}<br><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Notice how we’ve reduce the amount of code in this class <em>significantly</em>, to the point that anyone should be able to read it – with little or no exposure to Azure Table Storage – and still have a sense of what’s going on. We’ve taken our controller from over 50 lines of code (non-cruft/whitespace) to about 5. </p>
<p>Just to see how much more clear we’ve made things, do a “remove and sort” on your usings. You’ll notice that everything to do with Azure has all but disappeared; our repository has served it’s purpose!</p>
<p>Okay, so the repository is in place, and our controller is dramatically simplified. Now we need to do a bit of wiring to let the MVC Framework know that we’d like an instance of the class when the controller fires up. Here’s how.</p>
<h2 id="Adding_Dependency_Injection"><a href="#Adding_Dependency_Injection" class="headerlink" title="Adding Dependency Injection"></a>Adding Dependency Injection</h2><p>First, open the Package Manager Console (View –&gt; Other Windows –&gt; Package Manager Console) and type the following:</p>
<p><pre class="csharpcode">install-package Ninject.MVC5</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>The Ninject packages required for interoperation with the MVC Framework are installed, and you get a new class in _AppStart called NinjectWebCommon. This class contains an assembly-level attribute that allows it to properly wire dependency injection up in your application at startup, you’ll see this at the top of the file.</p>
<p>What happens now is quite interesting: when the MVC Framework tries to create an instance of a controller (i.e., when someone makes a request to your application), it looks for a constructor with no parameters. This no longer exists on our controller because we require the ITableStorageRepository&lt;KittehEntity&gt; parameter.&nbsp; Ninject will now step in for us and say, “Oh, you want something that looks like that? Here’s one I made for you!”</p>
<p>To get that kind of injection love, you need to go into the NinjectWebCommon class and update the RegisterServices method to include this line of code:</p>
<p><pre class="csharpcode">kernel.Bind&lt;ITableStorageRepository&lt;KittehEntity&gt;&gt;().To&lt;KittehRepository&gt;();</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>This simply says, “When someone asks for that interface, give them this concrete class.</p>
<p>So at this point, the wiring is done, and you can run your app! It will have the exact same functionality and user experience, but it will be much more technically sound.</p>
<h2 id="Notes_and_Improvements"><a href="#Notes_and_Improvements" class="headerlink" title="Notes and Improvements"></a>Notes and Improvements</h2><p>Just a few things to note:</p>
<ul>
<li>I’ve kept things simple and omitted ViewModels</li>
<li>You’d likely want to have a layer between your controller and repository class in most real-word scenarios</li>
<li>The repository class should have it’s dependencies injected as well, namely, the configuration information it needs to connect to Azure. A proper configuration helper class would do the trick and, once registered with Ninject, could also be accepted as a parameter on the constructor</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>With the repository in place we can now lighten the load on the controller and more easily implement features with our concerns more clearly separated. In the next couple of posts, we’re going to start allowing the user to manipulate the entities in the table.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>In <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/">this series</a> we]]>
    </summary>
    
      <category term="Uncategorized" scheme="http://jameschambers.com/categories/Uncategorized/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Three Types of Relationships You Need to Survive as a Remote Worker]]></title>
    <link href="http://jameschambers.com/2015/07/three-types-of-relationships-you-need-to-survive-as-a-remote-worker/"/>
    <id>http://jameschambers.com/2015/07/three-types-of-relationships-you-need-to-survive-as-a-remote-worker/</id>
    <published>2015-07-14T17:02:00.000Z</published>
    <updated>2016-01-20T03:26:07.435Z</updated>
    <content type="html"><![CDATA[<p>Getting through your work day on your own is easy enough.&nbsp; Over the long run, though,&nbsp; you’re going to need to have some solid relationships in your life to help get you through the rough patches and pick you up from the falls, but more importantly, to be there when it’s time to celebrate the wins.</p>
<p>While these are going to seem obvious at first, I want to make the point that they’re by no means effortless. In fact, some of the closest connections in your life can be the most affected by your choice to have your home serve also as your place of work.</p>
<h2 id="Your_Co-Workers"><a href="#Your_Co-Workers" class="headerlink" title="Your Co-Workers"></a>Your Co-Workers</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/07/office_relationships.jpg" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/office_relationships_thumb.jpg" alt="office_relationships" title="office_relationships"></a>In the movie <em>Office Space</em>, the main character Peter Gibbons pines that his motivation to work, or rather, to “work just hard enough not to get fired,” stems from unhealthy relationships with management. This <strong>cannot</strong> be your reality as a remote worker, and you need to make efforts to establish (and maintain) trust with your boss and teammates.</p>
<p>I have worked in blended environments where there was a head office with regular staff, but many remote workers and many office workers who had the option to work from home as they elected to do so. Being a permanent remote with very little office time (averaging about a day a month in the office) it was harder to get to know folks, but I knew it was really on me to own it.</p>
<p>Before you start at a company as a remote worker, or before you start working from home, talk to the management and other staff that already work remotely to see what it is like. If the atmosphere supports it, flying solo can be a great experience, but you still need the support of ground control. If you work as the only remote worker, or if management doesn’t trust or understand how productivity can work remotely, it may not be the right time for you to engage in flight.</p>
<h2 id="Fellow_Remote_Workers"><a href="#Fellow_Remote_Workers" class="headerlink" title="Fellow Remote Workers"></a>Fellow Remote Workers</h2><p>These ones are pretty important, especially in a company where there is a block of folks that work full-time at the office and a group that works remotely. Why are these folks good to know?</p>
<p>Because they <em>get ya</em>. They’re on the Skypes. They’re on the Slack. </p>
<p>They are trying to do the same things that you are doing and likely face the same challenges as you do. They look for solutions and have found tools that help them avoid the pitfalls. You’ve likely had to work through something that they haven’t yet, you have it figured out and it’s great to be able to share that with them. </p>
<p>Don’t be afraid to share your failures or ask for help! Being a good remote worker means mentoring and being mentored by other remote workers so that collectively we can all be really good at it. </p>
<h2 id="People_With_Absolutely_Nothing_to_do_with_Work"><a href="#People_With_Absolutely_Nothing_to_do_with_Work" class="headerlink" title="People With Absolutely Nothing to do with Work"></a>People With Absolutely Nothing to do with Work</h2><p>Ahhh…five o’clock, am I right? It’s that time when you disconnect from work and start to enjoy the more meaningful things in life. Of course, that means that you have be successful in leaving work in the first place, which can be tricky, but <a href="http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/">isn’t impossible to do</a>, especially if you’ve <a href="http://jameschambers.com/2015/03/wake-up-and-get-st-done-a-practice-of-awesome/">put in a good day</a>.</p>
<p>There a measure of counter-intuitiveness here that you’ll find. For example, keeping strong relationships in your own household is actually more about defining and maintaining boundaries during the workday than you might imagine. For example, if your office door is open as you’re working and your spouse, kids or roommates feel free to come and chat, you’re going to be less productive than you’d like to be. Over time, that loss of focus and reduced ability to create tangible outputs are going to start to turn into stress. Allowing the non-work relationships to bleed into your day can be a form of long term toxin that will erode your success as a remote worker.</p>
<p>Likewise, allowing your work day to bleed into your evenings and weekends will rob you of the best part of your day. Maybe you’re married with kids, fiancéed, or perhaps single, but the fact holds true regardless of your situation: marginalizing your family and friends to try to improve things at work will yield exactly zero positive results for your personal life. If you don’t agree with that statement, it’s simply because Dr. Seuss got the idea of the Grinch’s heart being two sizes too small from your life story. </p>
<p>There will be exceptions, where some rule-bending and time-bleeding will occur, but your job as a remote is to maintain that balance and be honest with yourself about how you’re doing in that regard.</p>
<h2 id="An_Old_Adage"><a href="#An_Old_Adage" class="headerlink" title="An Old Adage"></a>An Old Adage</h2><p>I do have to admit that I’m quite fortunate in this regard, as I’ve been able to align with an employer who is very much accustomed to and accepting of remote work. Working remotely, while becoming more common, isn’t yet universally accepted and I know from personal experience that if the culture isn’t there in the company, it can’t work on the long term.</p>
<p>It’s long and often been said that <strong>it takes a village to raise a child</strong>, and the reality of that statement is that at some point we have to grow up and be part of the village. As a remote worker, you need to remember that <strong>community isn’t going to just happen for you</strong>. Sure, you may not be raising kids, but the outcomes of your work efforts can only be best realized if you’re able to establish some great relationships along the way.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Getting through your work day on your own is easy enough.&nbsp; Over the long run, though,&nbsp; you’re going to need to have some solid ]]>
    </summary>
    
      <category term="Life Hacks" scheme="http://jameschambers.com/tags/Life-Hacks/"/>
    
      <category term="Remote Work" scheme="http://jameschambers.com/tags/Remote-Work/"/>
    
      <category term="Uncategorized" scheme="http://jameschambers.com/categories/Uncategorized/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rethinking our Practices with the MVC Framework]]></title>
    <link href="http://jameschambers.com/2015/06/rethinking-our-practices-with-the-mvc-framework/"/>
    <id>http://jameschambers.com/2015/06/rethinking-our-practices-with-the-mvc-framework/</id>
    <published>2015-06-14T07:52:59.000Z</published>
    <updated>2016-01-20T03:26:06.971Z</updated>
    <content type="html"><![CDATA[<p>We get set in our ways, don’t we? It’s funny how the sharper and more confident we get with our frameworks and the tooling we employ to work with them, we also get a little more attached to our way of doing things. And then along comes a major version change, ripe with breaking changes and new bits to twiddle and we’re left saying, “But, that’s not how we’ve always done it!”.</p>
<p>Case in point: <strong>service injection into views</strong>. In ASP.NET’s MVC Framework 6 we get this new concept which, if we’re going to accept, requires that we relax on our thinking of how we’ve always done things.</p>
<p>My friends <a href="https://twitter.com/dave_paquette" target="_blank" rel="external">Dave Paquette</a>, <a href="https://twitter.com/stimms" target="_blank" rel="external">Simon Timms</a> and <a href="https://twitter.com/canadianjames" target="_blank" rel="external">myself</a> have been ruffling through a few of these types of changes, and Simon did a great job of illustrating how we used to get data into our views, and how we might do it in <a href="http://blog.simontimms.com/2015/06/09/getting-lookup-data-into-you-view/" target="_blank" rel="external">tomorrow’s MVC</a>.  For a walkthrough of service injection I highly recommend his article on it.</p>
<p>How does it work? The new inject feature gives us the ability to asynchronously invoke methods on classes that are dynamically created and given to our view. It’s IoC for your UI.</p>
<p>Personally, I’d been wrestling with a good use case here because we had a way to do it, and it seems an obvious one (illustrated by Simon) had been missing my thought stream, likely because it’s been clouded for a few years with ViewBag. In all reality, the idea of using the ViewBag – a dynamic object that is double-blind, easily forgotten about and easily polluted – to push bits of data to the view has always kind of bugged me, no less than using filters did, but we didn’t have an elegant, framework-driven mechanism to make it happen more gracefully.  We do now.</p>
<p>Also, let’s not confuse things here: In more cases than not, your ViewModel is going to be the correct place to put your data, and where I’ve put my data for most things – like drop down lists – but this type of feature is exciting because it opens the door to explore new options in building views and experiences for our users.</p>
<h2 id="But_2C_doesn_u2019t_it_break_the_design_of_MVC_3F"><a href="#But_2C_doesn_u2019t_it_break_the_design_of_MVC_3F" class="headerlink" title="But, doesn’t it break the design of MVC?"></a>But, doesn’t it break the design of MVC?</h2><p>[caption id=”attachment_6491” align=”alignright” width=”300”]<a href="https://jcblogimages.blob.core.windows.net/img/2015/06/nuke.jpg" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/06/nuke-300x188.jpg" alt="Source: http://www.nv.doe.gov/library/photos/"></a> Sometimes things blow up when you try them out, but you still gotta try.[/caption]</p>
<p>Perhaps. Maybe, if you want to say, “The only definition valid for any framework is the original definition.” But we have more tools today to do our job, and in particular for this case dependency injection which has become a first-class citizen in ASP.NET. So, let’s rewind a bit and ask, why is it a bad practice to give a component the pieces it needs to do its work?</p>
<p>Let’s think of the type of problem that we’re trying to solve here, as Simon did in his article: a view needs to populate a dropdown list. It doesn’t need to access the database, and it shouldn’t have it. It doesn’t need to know a connection string, or if data is coming from a cache, a web service or otherwise, it just needs the data. Giving it an interface by which to look it up, well, to me that seems like a good idea.</p>
<p>If instead you favor the approach of using the controller to populate the ViewBag or use filters (or other techniques) you inherently introduce coupling to a specific view in the controller by forcing it to look up data to populate a dropdown box. <em>You are still injecting data into the view.</em> In my mind, the controller should know as little as possible about the view.  Why should I have to change my controller if I need to change my view?</p>
<p>I want to make a clear distinction here, though, as I do believe the controller answers very specific concerns, namely, those that deal with a particular entity. But the PersonController shouldn’t have to know the list of Canadian Provinces, should it?</p>
<h2 id="Don_u2019t_need_to_know_where_I_u2019m_going_2C_just_need_to_know_where_I_u2019ve_been"><a href="#Don_u2019t_need_to_know_where_I_u2019m_going_2C_just_need_to_know_where_I_u2019ve_been" class="headerlink" title="Don’t need to know where I’m going, just need to know where I’ve been"></a>Don’t need to know where I’m going, just need to know where I’ve been</h2><p>The assumption that the controller provides everything the view needs is guided by past pretence. It was true in MVC5 and earlier because it was what we had to work with. My point is that in MVC6 we now have a construct that allows:</p>
<ul>
<li>Separation of concern/single responsibility</li>
<li>Testability</li>
<li>Type safety</li>
<li>Injectable dependencies<br>In my mind, the controller is just a component. So is the view. The controller’s concerns are related to the entity in question. The view is required to render correct UI such that a form can be filled out in a way that satisfies the requirements of the view model. Again, why use a person controller to retrieve details about countries and states?</li>
</ul>
<p>I don’t see controllers as any more important than any other component. They have things they need, and they should have those things injected. My controllers don’t talk to the database, they talk to command objects and query objects via interface and those are injected from an IoC container.</p>
<p>I think now, with views as first-class components, that we can look at views in the same way.</p>
<h2 id="But_what_about_ViewBag_3F"><a href="#But_what_about_ViewBag_3F" class="headerlink" title="But what about ViewBag?"></a>But what about ViewBag?</h2><p>With ViewBag (and filters) we have a problem that we’re not really talking about in the best interest of not upsetting anyone. The fact that my controller has to do the lifting for the combo boxes is awkward and doesn’t really help us out too much with maintaining SRP. But we didn’t previously have a good way to address this.</p>
<p>We also tend to overlook the fact that Views are effectively code. Why can’t our principles apply to them as well? Of course I shouldn’t access the database from the view, but why can’t I know about an interface that does (and have it injected)?</p>
<p>This is a great use case of this new feature, and one that demonstrates that “not changing for the sake of not changing” isn’t a good mantra. If my view code/class/script is responsible for rendering the view, I see no problem injecting into it the things it needs to do so.</p>
<p>After all, isn’t that what you’re doing with ViewBag? Just injecting things into the view through the Dynamic? Except, with ViewBag, no one sees type problems and everyone has to cast. Now we’ve got run time errors.</p>
<p>There is the argument that says that even if we’re abstracting away the data access, we’re introducing the ability for the view to call the database. Again, I don’t think the view is any less important a component in the scheme of things, and there is a level of appropriateness with which we must use the feature. Will it be abused? Likely. You don’t want to be injecting database change-capable components into the view, but that is more a case of bad choices in implementation. You can completely destroy the maintainability of a project and wreak havoc on your users with service injection, but that doesn’t mean you should avoid it. I’ve seen people write 1,000 lines of code in a method, but that doesn’t mean I don’t use methods any more.</p>
<p><strong>When changes come to frameworks, I think it’s okay to rethink our best practices</strong>. Taking Simon’s approach we have:</p>
<ul>
<li>Interface-based injection</li>
<li>Abstraction from underlying data access strategy (db, cache, text file, whatever)</li>
<li>Testable components</li>
<li>Maintaining SRP in our controller and view</li>
<li>No casting from dynamic to proper types<br>I’m okay with this approach and will be using this approach in MVC 6 projects.</li>
</ul>
<p>I highly encourage you to do your own reading on this and explore the feature in greater detail. Here are a few links for your consideration.</p>
<ul>
<li>View components and Inject in <a href="http://www.asp.net/vnext/overview/aspnet-vnext/vc" target="_blank" rel="external">ASP.NET MVC 6</a></li>
<li>Simon Timms: <a href="http://blog.simontimms.com/2015/06/09/getting-lookup-data-into-you-view/" target="_blank" rel="external">Getting Lookup Data Into You View ASP.net MVC 6 Version</a></li>
<li>The ASP.NET <a href="https://github.com/aspnet/Mvc" target="_blank" rel="external">MVC 6 repo on GitHub</a><br>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/06/wlEmoticon-smile.png" alt="Smile"></li>
</ul>
<p><span style="color: #999999;"><em>Image credit: <a href="http://www.nv.doe.gov/library/photos/" target="_blank" rel="external">http://www.nv.doe.gov/library/photos/</a></em></span></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>We get set in our ways, don’t we? It’s funny how the sharper and more confident we get with our frameworks and the tooling we employ to w]]>
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Beyond-Code/Code-Dive/"/>
    
      <category term="Develop Meta" scheme="http://jameschambers.com/categories/Beyond-Code/Code-Dive/Develop-Meta/"/>
    
  </entry>
  
</feed>
